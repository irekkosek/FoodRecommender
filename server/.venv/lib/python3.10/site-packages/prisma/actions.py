# -*- coding: utf-8 -*-
# code generated by Prisma. DO NOT EDIT.
# pyright: reportUnusedImport=false
# fmt: off
from __future__ import annotations

# global imports for type checking
from builtins import bool as _bool
from builtins import int as _int
from builtins import float as _float
from builtins import str as _str
import sys
import decimal
import datetime
from typing import (
    TYPE_CHECKING,
    Optional,
    Iterable,
    Iterator,
    Sequence,
    Callable,
    ClassVar,
    NoReturn,
    TypeVar,
    Generic,
    Mapping,
    Tuple,
    Union,
    List,
    Dict,
    Type,
    Any,
    Set,
    overload,
    cast,
)
from typing_extensions import TypedDict, Literal


LiteralString = str
# -- template actions.py.jinja --
from typing import TypeVar
import warnings

from . import types, errors, bases

if TYPE_CHECKING:
    from .client import Client
    from .bases import _PrismaModel


_PrismaModelT = TypeVar('_PrismaModelT', bound='_PrismaModel')


class RECPIESActions(Generic[_PrismaModelT]):
    __slots__ = (
        '_client',
        '_model',
    )

    def __init__(self, client: 'Client', model: Type[_PrismaModelT]) -> None:
        self._client = client
        self._model = model

    async def query_raw(
        self,
        query: LiteralString,
        *args: Any,
    ) -> List[_PrismaModelT]:
        """Execute a raw SQL query

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        List[prisma.models.RECPIES]
            The records returned by the SQL query

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        users = await RECPIES.prisma().query_raw(
            'SELECT * FROM RECPIES WHERE id = $1',
            1103527590,
        )
        ```
        """
        return await self._client.query_raw(query, *args, model=self._model)

    async def query_first(
        self,
        query: LiteralString,
        *args: Any,
    ) -> Optional[_PrismaModelT]:
        """Execute a raw SQL query, returning the first result

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        prisma.models.RECPIES
            The first record returned by the SQL query
        None
            The raw SQL query did not return any records

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        user = await RECPIES.prisma().query_first(
            'SELECT * FROM RECPIES WHERE name = $1',
            'dhheabfhf',
        )
        ```
        """
        return await self._client.query_first(query, *args, model=self._model)

    async def create(
        self,
        data: types.RECPIESCreateInput,
        include: Optional[types.RECPIESInclude] = None
    ) -> _PrismaModelT:
        """Create a new RECPIES record.

        Parameters
        ----------
        data
            RECPIES record data
        include
            Specifies which relations should be loaded on the returned RECPIES model

        Returns
        -------
        prisma.models.RECPIES
            The created RECPIES record

        Raises
        ------
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # create a RECPIES record from just the required fields
        recpies = await RECPIES.prisma().create(
            data={
                # data to create a RECPIES record
                'name': 'ggciceaie',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='create',
            model=self._model,
            arguments={
                'data': data,
                'include': include,
            },
        )
        return self._model.parse_obj(resp['data']['result'])

    async def create_many(
        self,
        data: List[types.RECPIESCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> int:
        """Create multiple RECPIES records at once.

        This function is *not* available when using SQLite.

        Parameters
        ----------
        data
            List of RECPIES record data
        skip_duplicates
            Boolean flag for ignoring unique constraint errors

        Returns
        -------
        int
            The total number of records created

        Raises
        ------
        prisma.errors.UnsupportedDatabaseError
            Attempting to query when using SQLite
        prisma.errors.UniqueViolationError
            A unique constraint check has failed, these can be ignored with the `skip_duplicates` argument
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        total = await RECPIES.prisma().create_many(
            data=[
                {
                    # data to create a RECPIES record
                    'name': 'bbehjachib',
                },
                {
                    # data to create a RECPIES record
                    'name': 'cadfabfehe',
                },
            ],
            skip_duplicates=True,
        )
        ```
        """
        if self._client._active_provider == 'sqlite':
            raise errors.UnsupportedDatabaseError('sqlite', 'create_many()')

        resp = await self._client._execute(
            method='create_many',
            model=self._model,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    async def delete(
        self,
        where: types.RECPIESWhereUniqueInput,
        include: Optional[types.RECPIESInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Delete a single RECPIES record.

        Parameters
        ----------
        where
            RECPIES filter to select the record to be deleted, must be unique
        include
            Specifies which relations should be loaded on the returned RECPIES model

        Returns
        -------
        prisma.models.RECPIES
            The deleted RECPIES record
        None
            Could not find a record to delete

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        recpies = await RECPIES.prisma().delete(
            where={
                'id': 368800899,
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='delete',
                model=self._model,
                arguments={
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return self._model.parse_obj(resp['data']['result'])

    async def find_unique(
        self,
        where: types.RECPIESWhereUniqueInput,
        include: Optional[types.RECPIESInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Find a unique RECPIES record.

        Parameters
        ----------
        where
            RECPIES filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned RECPIES model

        Returns
        -------
        prisma.models.RECPIES
            The found RECPIES record
        None
            No record matching the given input could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        recpies = await RECPIES.prisma().find_unique(
            where={
                'id': 1508029952,
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return self._model.parse_obj(result)

    async def find_unique_or_raise(
        self,
        where: types.RECPIESWhereUniqueInput,
        include: Optional[types.RECPIESInclude] = None
    ) -> _PrismaModelT:
        """Find a unique RECPIES record. Raises `RecordNotFoundError` if no record is found.

        Parameters
        ----------
        where
            RECPIES filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned RECPIES model

        Returns
        -------
        prisma.models.RECPIES
            The found RECPIES record

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        recpies = await RECPIES.prisma().find_unique_or_raise(
            where={
                'id': 486256185,
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique_or_raise',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        return self._model.parse_obj(resp['data']['result'])

    async def find_many(
        self,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.RECPIESWhereInput] = None,
        cursor: Optional[types.RECPIESWhereUniqueInput] = None,
        include: Optional[types.RECPIESInclude] = None,
        order: Optional[Union[types.RECPIESOrderByInput, List[types.RECPIESOrderByInput]]] = None,
        distinct: Optional[List[types.RECPIESScalarFieldKeys]] = None,
    ) -> List[_PrismaModelT]:
        """Find multiple RECPIES records.

        An empty list is returned if no records could be found.

        Parameters
        ----------
        take
            Limit the maximum number of RECPIES records returned
        skip
            Ignore the first N results
        where
            RECPIES filter to select records
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned RECPIES model
        order
            Order the returned RECPIES records by any field
        distinct
            Filter RECPIES records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        List[prisma.models.RECPIES]
            The list of all RECPIES records that could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the first 10 RECPIES records
        recpiess = await RECPIES.prisma().find_many(take=10)

        # find the first 5 RECPIES records ordered by the slug field
        recpiess = await RECPIES.prisma().find_many(
            take=5,
            order={
                'slug': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_many',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return [self._model.parse_obj(r) for r in resp['data']['result']]

    async def find_first(
        self,
        skip: Optional[int] = None,
        where: Optional[types.RECPIESWhereInput] = None,
        cursor: Optional[types.RECPIESWhereUniqueInput] = None,
        include: Optional[types.RECPIESInclude] = None,
        order: Optional[Union[types.RECPIESOrderByInput, List[types.RECPIESOrderByInput]]] = None,
        distinct: Optional[List[types.RECPIESScalarFieldKeys]] = None,
    ) -> Optional[_PrismaModelT]:
        """Find a single RECPIES record.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            RECPIES filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned RECPIES model
        order
            Order the returned RECPIES records by any field
        distinct
            Filter RECPIES records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.RECPIES
            The first RECPIES record found, matching the given arguments
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second RECPIES record ordered by the video_url field
        recpies = await RECPIES.prisma().find_first(
            skip=1,
            order={
                'video_url': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return self._model.parse_obj(result)

    async def find_first_or_raise(
        self,
        skip: Optional[int] = None,
        where: Optional[types.RECPIESWhereInput] = None,
        cursor: Optional[types.RECPIESWhereUniqueInput] = None,
        include: Optional[types.RECPIESInclude] = None,
        order: Optional[Union[types.RECPIESOrderByInput, List[types.RECPIESOrderByInput]]] = None,
        distinct: Optional[List[types.RECPIESScalarFieldKeys]] = None,
    ) -> _PrismaModelT:
        """Find a single RECPIES record. Raises `RecordNotFoundError` if no record was found.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            RECPIES filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned RECPIES model
        order
            Order the returned RECPIES records by any field
        distinct
            Filter RECPIES records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.RECPIES
            The first RECPIES record found, matching the given arguments

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second RECPIES record ordered by the thumbnail_url field
        recpies = await RECPIES.prisma().find_first_or_raise(
            skip=1,
            order={
                'thumbnail_url': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first_or_raise',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return self._model.parse_obj(resp['data']['result'])

    async def update(
        self,
        data: types.RECPIESUpdateInput,
        where: types.RECPIESWhereUniqueInput,
        include: Optional[types.RECPIESInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Update a single RECPIES record.

        Parameters
        ----------
        data
            RECPIES record data specifying what to update
        where
            RECPIES filter to select the unique record to create / update
        include
            Specifies which relations should be loaded on the returned RECPIES model

        Returns
        -------
        prisma.models.RECPIES
            The updated RECPIES record
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        recpies = await RECPIES.prisma().update(
            where={
                'id': 1062517886,
            },
            data={
                # data to update the RECPIES record to
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='update',
                model=self._model,
                arguments={
                    'data': data,
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return self._model.parse_obj(resp['data']['result'])

    async def upsert(
        self,
        where: types.RECPIESWhereUniqueInput,
        data: types.RECPIESUpsertInput,
        include: Optional[types.RECPIESInclude] = None,
    ) -> _PrismaModelT:
        """Updates an existing record or create a new one

        Parameters
        ----------
        where
            RECPIES filter to select the unique record to create / update
        data
            Data specifying what fields to set on create and update
        include
            Specifies which relations should be loaded on the returned RECPIES model

        Returns
        -------
        prisma.models.RECPIES
            The created or updated RECPIES record

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        recpies = await RECPIES.prisma().upsert(
            where={
                'id': 267834847,
            },
            data={
                'create': {
                    'id': 267834847,
                    'name': 'cadfabfehe',
                },
                'update': {
                    'name': 'cadfabfehe',
                },
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='upsert',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )
        return self._model.parse_obj(resp['data']['result'])

    async def update_many(
        self,
        data: types.RECPIESUpdateManyMutationInput,
        where: types.RECPIESWhereInput,
    ) -> int:
        """Update multiple RECPIES records

        Parameters
        ----------
        data
            RECPIES data to update the selected RECPIES records to
        where
            Filter to select the RECPIES records to update

        Returns
        -------
        int
            The total number of RECPIES records that were updated

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # update all RECPIES records
        total = await RECPIES.prisma().update_many(
            data={
                'id': 180171308
            },
            where={}
        )
        ```
        """
        resp = await self._client._execute(
            method='update_many',
            model=self._model,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    @overload
    async def count(
        self,
        select: None = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.RECPIESWhereInput] = None,
        cursor: Optional[types.RECPIESWhereUniqueInput] = None,
    ) -> int:
        """Count the number of RECPIES records present in the database

        Parameters
        ----------
        select
            Select the RECPIES fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            RECPIES filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.RECPIESCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await RECPIES.prisma().count()

        # results: prisma.types.RECPIESCountAggregateOutput
        results = await RECPIES.prisma().count(
            select={
                '_all': True,
                'name': True,
            },
        )
        ```
        """


    @overload
    async def count(
        self,
        select: types.RECPIESCountAggregateInput,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.RECPIESWhereInput] = None,
        cursor: Optional[types.RECPIESWhereUniqueInput] = None,
    ) -> types.RECPIESCountAggregateOutput:
        ...

    async def count(
        self,
        select: Optional[types.RECPIESCountAggregateInput] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.RECPIESWhereInput] = None,
        cursor: Optional[types.RECPIESWhereUniqueInput] = None,
    ) -> Union[int, types.RECPIESCountAggregateOutput]:
        """Count the number of RECPIES records present in the database

        Parameters
        ----------
        select
            Select the RECPIES fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            RECPIES filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.RECPIESCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await RECPIES.prisma().count()

        # results: prisma.types.RECPIESCountAggregateOutput
        results = await RECPIES.prisma().count(
            select={
                '_all': True,
                'slug': True,
            },
        )
        ```
        """

        # TODO: this selection building should be moved to the QueryBuilder
        #
        # note the distinction between checking for `not select` here and `select is None`
        # later is to handle the case that the given select dictionary is empty, this
        # is a limitation of our types.
        if not select:
            root_selection = ['_count { _all }']
        else:

            root_selection = [
                '_count {{ {0} }}'.format(' '.join(k for k, v in select.items() if v is True))
            ]

        resp = await self._client._execute(
            method='count',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'cursor': cursor,
            },
            root_selection=root_selection,
        )

        if select is None:
            return cast(int, resp['data']['result']['_count']['_all'])
        else:
            return cast(types.RECPIESCountAggregateOutput, resp['data']['result']['_count'])

    async def delete_many(
        self,
        where: Optional[types.RECPIESWhereInput] = None
    ) -> int:
        """Delete multiple RECPIES records.

        Parameters
        ----------
        where
            Optional RECPIES filter to find the records to be deleted

        Returns
        -------
        int
            The total number of RECPIES records that were deleted

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # delete all RECPIES records
        total = await RECPIES.prisma().delete_many()
        ```
        """
        resp = await self._client._execute(
            method='delete_many',
            model=self._model,
            arguments={'where': where},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    # TODO: make this easier to work with safely, currently output fields are typed as
    #       not required, we should refactor the return type
    # TODO: consider returning a Dict where the keys are a Tuple of the `by` selection
    # TODO: statically type that the order argument is required when take or skip are present
    async def group_by(
        self,
        by: List['types.RECPIESScalarFieldKeys'],
        *,
        where: Optional['types.RECPIESWhereInput'] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        avg: Optional['types.RECPIESAvgAggregateInput'] = None,
        sum: Optional['types.RECPIESSumAggregateInput'] = None,
        min: Optional['types.RECPIESMinAggregateInput'] = None,
        max: Optional['types.RECPIESMaxAggregateInput'] = None,
        having: Optional['types.RECPIESScalarWhereWithAggregatesInput'] = None,
        count: Optional[Union[bool, 'types.RECPIESCountAggregateInput']] = None,
        order: Optional[Union[Mapping['types.RECPIESScalarFieldKeys', 'types.SortOrder'], List[Mapping['types.RECPIESScalarFieldKeys', 'types.SortOrder']]]] = None,
    ) -> List['types.RECPIESGroupByOutput']:
        """Group RECPIES records by one or more field values and perform aggregations
        each group such as finding the average.

        Parameters
        ----------
        by
            List of scalar RECPIES fields to group records by
        where
            RECPIES filter to select records
        take
            Limit the maximum number of RECPIES records returned
        skip
            Ignore the first N records
        avg
            Adds the average of all values of the specified fields to the `_avg` field
            in the returned data.
        sum
            Adds the sum of all values of the specified fields to the `_sum` field
            in the returned data.
        min
            Adds the smallest available value for the specified fields to the `_min` field
            in the returned data.
        max
            Adds the largest available value for the specified fields to the `_max` field
            in the returned data.
        count
            Adds a count of non-fields to the `_count` field in the returned data.
        having
            Allows you to filter groups by an aggregate value - for example only return
            groups having an average age less than 50.
        order
            Lets you order the returned list by any property that is also present in `by`.
            Only **one** field is allowed at a time.

        Returns
        -------
        List[prisma.types.RECPIESGroupByOutput]
            A list of dictionaries representing the RECPIES record,
            this will also have additional fields present if aggregation arguments
            are used (see the above parameters)

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # group RECPIES records by video_url values
        # and count how many records are in each group
        results = await RECPIES.prisma().group_by(
            ['video_url'],
            count=True,
        )
        ```
        """
        if order is None:
            if take is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'take\' is present')

            if skip is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'skip\' is present')

        root_selection: List[str] = [*by]
        if avg is not None:
            root_selection.append(_select_fields('_avg', avg))

        if min is not None:
            root_selection.append(_select_fields('_min', min))

        if sum is not None:
            root_selection.append(_select_fields('_sum', sum))

        if max is not None:
            root_selection.append(_select_fields('_max', max))

        if count is not None:
            if count is True:
                root_selection.append('_count { _all }')
            elif isinstance(count, dict):
                root_selection.append(_select_fields('_count', count))

        resp = await self._client._execute(
            method='group_by',
            model=self._model,
            arguments={
                'by': by,
                'take': take,
                'skip': skip,
                'where': where,
                'having': having,
                'orderBy': order,
            },
            root_selection=root_selection,
        )
        return resp['data']['result']  # type: ignore[no-any-return]


class USERSActions(Generic[_PrismaModelT]):
    __slots__ = (
        '_client',
        '_model',
    )

    def __init__(self, client: 'Client', model: Type[_PrismaModelT]) -> None:
        self._client = client
        self._model = model

    async def query_raw(
        self,
        query: LiteralString,
        *args: Any,
    ) -> List[_PrismaModelT]:
        """Execute a raw SQL query

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        List[prisma.models.USERS]
            The records returned by the SQL query

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        users = await USERS.prisma().query_raw(
            'SELECT * FROM USERS WHERE id = $1',
            836760821,
        )
        ```
        """
        return await self._client.query_raw(query, *args, model=self._model)

    async def query_first(
        self,
        query: LiteralString,
        *args: Any,
    ) -> Optional[_PrismaModelT]:
        """Execute a raw SQL query, returning the first result

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        prisma.models.USERS
            The first record returned by the SQL query
        None
            The raw SQL query did not return any records

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        user = await USERS.prisma().query_first(
            'SELECT * FROM USERS WHERE name = $1',
            'fjfddhigg',
        )
        ```
        """
        return await self._client.query_first(query, *args, model=self._model)

    async def create(
        self,
        data: types.USERSCreateInput,
        include: Optional[types.USERSInclude] = None
    ) -> _PrismaModelT:
        """Create a new USERS record.

        Parameters
        ----------
        data
            USERS record data
        include
            Specifies which relations should be loaded on the returned USERS model

        Returns
        -------
        prisma.models.USERS
            The created USERS record

        Raises
        ------
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # create a USERS record from just the required fields
        users = await USERS.prisma().create(
            data={
                # data to create a USERS record
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='create',
            model=self._model,
            arguments={
                'data': data,
                'include': include,
            },
        )
        return self._model.parse_obj(resp['data']['result'])

    async def create_many(
        self,
        data: List[types.USERSCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> int:
        """Create multiple USERS records at once.

        This function is *not* available when using SQLite.

        Parameters
        ----------
        data
            List of USERS record data
        skip_duplicates
            Boolean flag for ignoring unique constraint errors

        Returns
        -------
        int
            The total number of records created

        Raises
        ------
        prisma.errors.UnsupportedDatabaseError
            Attempting to query when using SQLite
        prisma.errors.UniqueViolationError
            A unique constraint check has failed, these can be ignored with the `skip_duplicates` argument
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        total = await USERS.prisma().create_many(
            data=[
                {
                    # data to create a USERS record
                },
                {
                    # data to create a USERS record
                },
            ],
            skip_duplicates=True,
        )
        ```
        """
        if self._client._active_provider == 'sqlite':
            raise errors.UnsupportedDatabaseError('sqlite', 'create_many()')

        resp = await self._client._execute(
            method='create_many',
            model=self._model,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    async def delete(
        self,
        where: types.USERSWhereUniqueInput,
        include: Optional[types.USERSInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Delete a single USERS record.

        Parameters
        ----------
        where
            USERS filter to select the record to be deleted, must be unique
        include
            Specifies which relations should be loaded on the returned USERS model

        Returns
        -------
        prisma.models.USERS
            The deleted USERS record
        None
            Could not find a record to delete

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        users = await USERS.prisma().delete(
            where={
                'id': 790425851,
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='delete',
                model=self._model,
                arguments={
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return self._model.parse_obj(resp['data']['result'])

    async def find_unique(
        self,
        where: types.USERSWhereUniqueInput,
        include: Optional[types.USERSInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Find a unique USERS record.

        Parameters
        ----------
        where
            USERS filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned USERS model

        Returns
        -------
        prisma.models.USERS
            The found USERS record
        None
            No record matching the given input could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        users = await USERS.prisma().find_unique(
            where={
                'id': 2111915288,
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return self._model.parse_obj(result)

    async def find_unique_or_raise(
        self,
        where: types.USERSWhereUniqueInput,
        include: Optional[types.USERSInclude] = None
    ) -> _PrismaModelT:
        """Find a unique USERS record. Raises `RecordNotFoundError` if no record is found.

        Parameters
        ----------
        where
            USERS filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned USERS model

        Returns
        -------
        prisma.models.USERS
            The found USERS record

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        users = await USERS.prisma().find_unique_or_raise(
            where={
                'id': 1149758321,
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique_or_raise',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        return self._model.parse_obj(resp['data']['result'])

    async def find_many(
        self,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.USERSWhereInput] = None,
        cursor: Optional[types.USERSWhereUniqueInput] = None,
        include: Optional[types.USERSInclude] = None,
        order: Optional[Union[types.USERSOrderByInput, List[types.USERSOrderByInput]]] = None,
        distinct: Optional[List[types.USERSScalarFieldKeys]] = None,
    ) -> List[_PrismaModelT]:
        """Find multiple USERS records.

        An empty list is returned if no records could be found.

        Parameters
        ----------
        take
            Limit the maximum number of USERS records returned
        skip
            Ignore the first N results
        where
            USERS filter to select records
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned USERS model
        order
            Order the returned USERS records by any field
        distinct
            Filter USERS records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        List[prisma.models.USERS]
            The list of all USERS records that could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the first 10 USERS records
        userss = await USERS.prisma().find_many(take=10)

        # find the first 5 USERS records ordered by the id field
        userss = await USERS.prisma().find_many(
            take=5,
            order={
                'id': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_many',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return [self._model.parse_obj(r) for r in resp['data']['result']]

    async def find_first(
        self,
        skip: Optional[int] = None,
        where: Optional[types.USERSWhereInput] = None,
        cursor: Optional[types.USERSWhereUniqueInput] = None,
        include: Optional[types.USERSInclude] = None,
        order: Optional[Union[types.USERSOrderByInput, List[types.USERSOrderByInput]]] = None,
        distinct: Optional[List[types.USERSScalarFieldKeys]] = None,
    ) -> Optional[_PrismaModelT]:
        """Find a single USERS record.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            USERS filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned USERS model
        order
            Order the returned USERS records by any field
        distinct
            Filter USERS records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.USERS
            The first USERS record found, matching the given arguments
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second USERS record ordered by the name field
        users = await USERS.prisma().find_first(
            skip=1,
            order={
                'name': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return self._model.parse_obj(result)

    async def find_first_or_raise(
        self,
        skip: Optional[int] = None,
        where: Optional[types.USERSWhereInput] = None,
        cursor: Optional[types.USERSWhereUniqueInput] = None,
        include: Optional[types.USERSInclude] = None,
        order: Optional[Union[types.USERSOrderByInput, List[types.USERSOrderByInput]]] = None,
        distinct: Optional[List[types.USERSScalarFieldKeys]] = None,
    ) -> _PrismaModelT:
        """Find a single USERS record. Raises `RecordNotFoundError` if no record was found.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            USERS filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned USERS model
        order
            Order the returned USERS records by any field
        distinct
            Filter USERS records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.USERS
            The first USERS record found, matching the given arguments

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second USERS record ordered by the id field
        users = await USERS.prisma().find_first_or_raise(
            skip=1,
            order={
                'id': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first_or_raise',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return self._model.parse_obj(resp['data']['result'])

    async def update(
        self,
        data: types.USERSUpdateInput,
        where: types.USERSWhereUniqueInput,
        include: Optional[types.USERSInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Update a single USERS record.

        Parameters
        ----------
        data
            USERS record data specifying what to update
        where
            USERS filter to select the unique record to create / update
        include
            Specifies which relations should be loaded on the returned USERS model

        Returns
        -------
        prisma.models.USERS
            The updated USERS record
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        users = await USERS.prisma().update(
            where={
                'id': 1644289366,
            },
            data={
                # data to update the USERS record to
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='update',
                model=self._model,
                arguments={
                    'data': data,
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return self._model.parse_obj(resp['data']['result'])

    async def upsert(
        self,
        where: types.USERSWhereUniqueInput,
        data: types.USERSUpsertInput,
        include: Optional[types.USERSInclude] = None,
    ) -> _PrismaModelT:
        """Updates an existing record or create a new one

        Parameters
        ----------
        where
            USERS filter to select the unique record to create / update
        data
            Data specifying what fields to set on create and update
        include
            Specifies which relations should be loaded on the returned USERS model

        Returns
        -------
        prisma.models.USERS
            The created or updated USERS record

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        users = await USERS.prisma().upsert(
            where={
                'id': 1388290519,
            },
            data={
                'create': {
                    'id': 1388290519,
                },
                'update': {
                },
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='upsert',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )
        return self._model.parse_obj(resp['data']['result'])

    async def update_many(
        self,
        data: types.USERSUpdateManyMutationInput,
        where: types.USERSWhereInput,
    ) -> int:
        """Update multiple USERS records

        Parameters
        ----------
        data
            USERS data to update the selected USERS records to
        where
            Filter to select the USERS records to update

        Returns
        -------
        int
            The total number of USERS records that were updated

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # update all USERS records
        total = await USERS.prisma().update_many(
            data={
                'name': 'bgehebiafc'
            },
            where={}
        )
        ```
        """
        resp = await self._client._execute(
            method='update_many',
            model=self._model,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    @overload
    async def count(
        self,
        select: None = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.USERSWhereInput] = None,
        cursor: Optional[types.USERSWhereUniqueInput] = None,
    ) -> int:
        """Count the number of USERS records present in the database

        Parameters
        ----------
        select
            Select the USERS fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            USERS filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.USERSCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await USERS.prisma().count()

        # results: prisma.types.USERSCountAggregateOutput
        results = await USERS.prisma().count(
            select={
                '_all': True,
                'id': True,
            },
        )
        ```
        """


    @overload
    async def count(
        self,
        select: types.USERSCountAggregateInput,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.USERSWhereInput] = None,
        cursor: Optional[types.USERSWhereUniqueInput] = None,
    ) -> types.USERSCountAggregateOutput:
        ...

    async def count(
        self,
        select: Optional[types.USERSCountAggregateInput] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.USERSWhereInput] = None,
        cursor: Optional[types.USERSWhereUniqueInput] = None,
    ) -> Union[int, types.USERSCountAggregateOutput]:
        """Count the number of USERS records present in the database

        Parameters
        ----------
        select
            Select the USERS fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            USERS filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.USERSCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await USERS.prisma().count()

        # results: prisma.types.USERSCountAggregateOutput
        results = await USERS.prisma().count(
            select={
                '_all': True,
                'name': True,
            },
        )
        ```
        """

        # TODO: this selection building should be moved to the QueryBuilder
        #
        # note the distinction between checking for `not select` here and `select is None`
        # later is to handle the case that the given select dictionary is empty, this
        # is a limitation of our types.
        if not select:
            root_selection = ['_count { _all }']
        else:

            root_selection = [
                '_count {{ {0} }}'.format(' '.join(k for k, v in select.items() if v is True))
            ]

        resp = await self._client._execute(
            method='count',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'cursor': cursor,
            },
            root_selection=root_selection,
        )

        if select is None:
            return cast(int, resp['data']['result']['_count']['_all'])
        else:
            return cast(types.USERSCountAggregateOutput, resp['data']['result']['_count'])

    async def delete_many(
        self,
        where: Optional[types.USERSWhereInput] = None
    ) -> int:
        """Delete multiple USERS records.

        Parameters
        ----------
        where
            Optional USERS filter to find the records to be deleted

        Returns
        -------
        int
            The total number of USERS records that were deleted

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # delete all USERS records
        total = await USERS.prisma().delete_many()
        ```
        """
        resp = await self._client._execute(
            method='delete_many',
            model=self._model,
            arguments={'where': where},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    # TODO: make this easier to work with safely, currently output fields are typed as
    #       not required, we should refactor the return type
    # TODO: consider returning a Dict where the keys are a Tuple of the `by` selection
    # TODO: statically type that the order argument is required when take or skip are present
    async def group_by(
        self,
        by: List['types.USERSScalarFieldKeys'],
        *,
        where: Optional['types.USERSWhereInput'] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        avg: Optional['types.USERSAvgAggregateInput'] = None,
        sum: Optional['types.USERSSumAggregateInput'] = None,
        min: Optional['types.USERSMinAggregateInput'] = None,
        max: Optional['types.USERSMaxAggregateInput'] = None,
        having: Optional['types.USERSScalarWhereWithAggregatesInput'] = None,
        count: Optional[Union[bool, 'types.USERSCountAggregateInput']] = None,
        order: Optional[Union[Mapping['types.USERSScalarFieldKeys', 'types.SortOrder'], List[Mapping['types.USERSScalarFieldKeys', 'types.SortOrder']]]] = None,
    ) -> List['types.USERSGroupByOutput']:
        """Group USERS records by one or more field values and perform aggregations
        each group such as finding the average.

        Parameters
        ----------
        by
            List of scalar USERS fields to group records by
        where
            USERS filter to select records
        take
            Limit the maximum number of USERS records returned
        skip
            Ignore the first N records
        avg
            Adds the average of all values of the specified fields to the `_avg` field
            in the returned data.
        sum
            Adds the sum of all values of the specified fields to the `_sum` field
            in the returned data.
        min
            Adds the smallest available value for the specified fields to the `_min` field
            in the returned data.
        max
            Adds the largest available value for the specified fields to the `_max` field
            in the returned data.
        count
            Adds a count of non-fields to the `_count` field in the returned data.
        having
            Allows you to filter groups by an aggregate value - for example only return
            groups having an average age less than 50.
        order
            Lets you order the returned list by any property that is also present in `by`.
            Only **one** field is allowed at a time.

        Returns
        -------
        List[prisma.types.USERSGroupByOutput]
            A list of dictionaries representing the USERS record,
            this will also have additional fields present if aggregation arguments
            are used (see the above parameters)

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # group USERS records by id values
        # and count how many records are in each group
        results = await USERS.prisma().group_by(
            ['id'],
            count=True,
        )
        ```
        """
        if order is None:
            if take is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'take\' is present')

            if skip is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'skip\' is present')

        root_selection: List[str] = [*by]
        if avg is not None:
            root_selection.append(_select_fields('_avg', avg))

        if min is not None:
            root_selection.append(_select_fields('_min', min))

        if sum is not None:
            root_selection.append(_select_fields('_sum', sum))

        if max is not None:
            root_selection.append(_select_fields('_max', max))

        if count is not None:
            if count is True:
                root_selection.append('_count { _all }')
            elif isinstance(count, dict):
                root_selection.append(_select_fields('_count', count))

        resp = await self._client._execute(
            method='group_by',
            model=self._model,
            arguments={
                'by': by,
                'take': take,
                'skip': skip,
                'where': where,
                'having': having,
                'orderBy': order,
            },
            root_selection=root_selection,
        )
        return resp['data']['result']  # type: ignore[no-any-return]


class USER_likes_RECPIESActions(Generic[_PrismaModelT]):
    __slots__ = (
        '_client',
        '_model',
    )

    def __init__(self, client: 'Client', model: Type[_PrismaModelT]) -> None:
        self._client = client
        self._model = model

    async def query_raw(
        self,
        query: LiteralString,
        *args: Any,
    ) -> List[_PrismaModelT]:
        """Execute a raw SQL query

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        List[prisma.models.USER_likes_RECPIES]
            The records returned by the SQL query

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        users = await USER_likes_RECPIES.prisma().query_raw(
            'SELECT * FROM USER_likes_RECPIES WHERE USER_id = $1',
            1675546029,
        )
        ```
        """
        return await self._client.query_raw(query, *args, model=self._model)

    async def query_first(
        self,
        query: LiteralString,
        *args: Any,
    ) -> Optional[_PrismaModelT]:
        """Execute a raw SQL query, returning the first result

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        prisma.models.USER_likes_RECPIES
            The first record returned by the SQL query
        None
            The raw SQL query did not return any records

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        user = await USER_likes_RECPIES.prisma().query_first(
            'SELECT * FROM USER_likes_RECPIES WHERE RECIPE_id = $1',
            1767274722,
        )
        ```
        """
        return await self._client.query_first(query, *args, model=self._model)

    async def create(
        self,
        data: types.USER_likes_RECPIESCreateInput,
        include: Optional[types.USER_likes_RECPIESInclude] = None
    ) -> _PrismaModelT:
        """Create a new USER_likes_RECPIES record.

        Parameters
        ----------
        data
            USER_likes_RECPIES record data
        include
            Specifies which relations should be loaded on the returned USER_likes_RECPIES model

        Returns
        -------
        prisma.models.USER_likes_RECPIES
            The created USER_likes_RECPIES record

        Raises
        ------
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # create a USER_likes_RECPIES record from just the required fields
        user_likes_recpies = await USER_likes_RECPIES.prisma().create(
            data={
                # data to create a USER_likes_RECPIES record
                'USER_id': 326272115,
                'RECIPE_id': 1343201072,
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='create',
            model=self._model,
            arguments={
                'data': data,
                'include': include,
            },
        )
        return self._model.parse_obj(resp['data']['result'])

    async def create_many(
        self,
        data: List[types.USER_likes_RECPIESCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> int:
        """Create multiple USER_likes_RECPIES records at once.

        This function is *not* available when using SQLite.

        Parameters
        ----------
        data
            List of USER_likes_RECPIES record data
        skip_duplicates
            Boolean flag for ignoring unique constraint errors

        Returns
        -------
        int
            The total number of records created

        Raises
        ------
        prisma.errors.UnsupportedDatabaseError
            Attempting to query when using SQLite
        prisma.errors.UniqueViolationError
            A unique constraint check has failed, these can be ignored with the `skip_duplicates` argument
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        total = await USER_likes_RECPIES.prisma().create_many(
            data=[
                {
                    # data to create a USER_likes_RECPIES record
                    'USER_id': 675780521,
                    'RECIPE_id': 744964398,
                },
                {
                    # data to create a USER_likes_RECPIES record
                    'USER_id': 1969681615,
                    'RECIPE_id': 1116175964,
                },
            ],
            skip_duplicates=True,
        )
        ```
        """
        if self._client._active_provider == 'sqlite':
            raise errors.UnsupportedDatabaseError('sqlite', 'create_many()')

        resp = await self._client._execute(
            method='create_many',
            model=self._model,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    async def delete(
        self,
        where: types.USER_likes_RECPIESWhereUniqueInput,
        include: Optional[types.USER_likes_RECPIESInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Delete a single USER_likes_RECPIES record.

        Parameters
        ----------
        where
            USER_likes_RECPIES filter to select the record to be deleted, must be unique
        include
            Specifies which relations should be loaded on the returned USER_likes_RECPIES model

        Returns
        -------
        prisma.models.USER_likes_RECPIES
            The deleted USER_likes_RECPIES record
        None
            Could not find a record to delete

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        user_likes_recpies = await USER_likes_RECPIES.prisma().delete(
            where={
                # USER_likes_RECPIES where unique filter

            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='delete',
                model=self._model,
                arguments={
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return self._model.parse_obj(resp['data']['result'])

    async def find_unique(
        self,
        where: types.USER_likes_RECPIESWhereUniqueInput,
        include: Optional[types.USER_likes_RECPIESInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Find a unique USER_likes_RECPIES record.

        Parameters
        ----------
        where
            USER_likes_RECPIES filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned USER_likes_RECPIES model

        Returns
        -------
        prisma.models.USER_likes_RECPIES
            The found USER_likes_RECPIES record
        None
            No record matching the given input could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        user_likes_recpies = await USER_likes_RECPIES.prisma().find_unique(
            where={
                # USER_likes_RECPIES where unique filter

            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return self._model.parse_obj(result)

    async def find_unique_or_raise(
        self,
        where: types.USER_likes_RECPIESWhereUniqueInput,
        include: Optional[types.USER_likes_RECPIESInclude] = None
    ) -> _PrismaModelT:
        """Find a unique USER_likes_RECPIES record. Raises `RecordNotFoundError` if no record is found.

        Parameters
        ----------
        where
            USER_likes_RECPIES filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned USER_likes_RECPIES model

        Returns
        -------
        prisma.models.USER_likes_RECPIES
            The found USER_likes_RECPIES record

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        user_likes_recpies = await USER_likes_RECPIES.prisma().find_unique_or_raise(
            where={
                # USER_likes_RECPIES where unique filter

            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique_or_raise',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        return self._model.parse_obj(resp['data']['result'])

    async def find_many(
        self,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.USER_likes_RECPIESWhereInput] = None,
        cursor: Optional[types.USER_likes_RECPIESWhereUniqueInput] = None,
        include: Optional[types.USER_likes_RECPIESInclude] = None,
        order: Optional[Union[types.USER_likes_RECPIESOrderByInput, List[types.USER_likes_RECPIESOrderByInput]]] = None,
        distinct: Optional[List[types.USER_likes_RECPIESScalarFieldKeys]] = None,
    ) -> List[_PrismaModelT]:
        """Find multiple USER_likes_RECPIES records.

        An empty list is returned if no records could be found.

        Parameters
        ----------
        take
            Limit the maximum number of USER_likes_RECPIES records returned
        skip
            Ignore the first N results
        where
            USER_likes_RECPIES filter to select records
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned USER_likes_RECPIES model
        order
            Order the returned USER_likes_RECPIES records by any field
        distinct
            Filter USER_likes_RECPIES records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        List[prisma.models.USER_likes_RECPIES]
            The list of all USER_likes_RECPIES records that could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the first 10 USER_likes_RECPIES records
        user_likes_recpiess = await USER_likes_RECPIES.prisma().find_many(take=10)

        # find the first 5 USER_likes_RECPIES records ordered by the USER_id field
        user_likes_recpiess = await USER_likes_RECPIES.prisma().find_many(
            take=5,
            order={
                'USER_id': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_many',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return [self._model.parse_obj(r) for r in resp['data']['result']]

    async def find_first(
        self,
        skip: Optional[int] = None,
        where: Optional[types.USER_likes_RECPIESWhereInput] = None,
        cursor: Optional[types.USER_likes_RECPIESWhereUniqueInput] = None,
        include: Optional[types.USER_likes_RECPIESInclude] = None,
        order: Optional[Union[types.USER_likes_RECPIESOrderByInput, List[types.USER_likes_RECPIESOrderByInput]]] = None,
        distinct: Optional[List[types.USER_likes_RECPIESScalarFieldKeys]] = None,
    ) -> Optional[_PrismaModelT]:
        """Find a single USER_likes_RECPIES record.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            USER_likes_RECPIES filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned USER_likes_RECPIES model
        order
            Order the returned USER_likes_RECPIES records by any field
        distinct
            Filter USER_likes_RECPIES records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.USER_likes_RECPIES
            The first USER_likes_RECPIES record found, matching the given arguments
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second USER_likes_RECPIES record ordered by the RECIPE_id field
        user_likes_recpies = await USER_likes_RECPIES.prisma().find_first(
            skip=1,
            order={
                'RECIPE_id': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return self._model.parse_obj(result)

    async def find_first_or_raise(
        self,
        skip: Optional[int] = None,
        where: Optional[types.USER_likes_RECPIESWhereInput] = None,
        cursor: Optional[types.USER_likes_RECPIESWhereUniqueInput] = None,
        include: Optional[types.USER_likes_RECPIESInclude] = None,
        order: Optional[Union[types.USER_likes_RECPIESOrderByInput, List[types.USER_likes_RECPIESOrderByInput]]] = None,
        distinct: Optional[List[types.USER_likes_RECPIESScalarFieldKeys]] = None,
    ) -> _PrismaModelT:
        """Find a single USER_likes_RECPIES record. Raises `RecordNotFoundError` if no record was found.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            USER_likes_RECPIES filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned USER_likes_RECPIES model
        order
            Order the returned USER_likes_RECPIES records by any field
        distinct
            Filter USER_likes_RECPIES records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.USER_likes_RECPIES
            The first USER_likes_RECPIES record found, matching the given arguments

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second USER_likes_RECPIES record ordered by the USER_id field
        user_likes_recpies = await USER_likes_RECPIES.prisma().find_first_or_raise(
            skip=1,
            order={
                'USER_id': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first_or_raise',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return self._model.parse_obj(resp['data']['result'])

    async def update(
        self,
        data: types.USER_likes_RECPIESUpdateInput,
        where: types.USER_likes_RECPIESWhereUniqueInput,
        include: Optional[types.USER_likes_RECPIESInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Update a single USER_likes_RECPIES record.

        Parameters
        ----------
        data
            USER_likes_RECPIES record data specifying what to update
        where
            USER_likes_RECPIES filter to select the unique record to create / update
        include
            Specifies which relations should be loaded on the returned USER_likes_RECPIES model

        Returns
        -------
        prisma.models.USER_likes_RECPIES
            The updated USER_likes_RECPIES record
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        user_likes_recpies = await USER_likes_RECPIES.prisma().update(
            where={
                # USER_likes_RECPIES where unique filter

            },
            data={
                # data to update the USER_likes_RECPIES record to
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='update',
                model=self._model,
                arguments={
                    'data': data,
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return self._model.parse_obj(resp['data']['result'])

    async def upsert(
        self,
        where: types.USER_likes_RECPIESWhereUniqueInput,
        data: types.USER_likes_RECPIESUpsertInput,
        include: Optional[types.USER_likes_RECPIESInclude] = None,
    ) -> _PrismaModelT:
        """Updates an existing record or create a new one

        Parameters
        ----------
        where
            USER_likes_RECPIES filter to select the unique record to create / update
        data
            Data specifying what fields to set on create and update
        include
            Specifies which relations should be loaded on the returned USER_likes_RECPIES model

        Returns
        -------
        prisma.models.USER_likes_RECPIES
            The created or updated USER_likes_RECPIES record

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        user_likes_recpies = await USER_likes_RECPIES.prisma().upsert(
            where={
                # USER_likes_RECPIES where unique filter
            },
            data={
                'create': {
                    # USER_likes_RECPIES data to be set if the record does not exist
                },
                'update': {
                    # USER_likes_RECPIES data to be set if the record does exist
                },
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='upsert',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )
        return self._model.parse_obj(resp['data']['result'])

    async def update_many(
        self,
        data: types.USER_likes_RECPIESUpdateManyMutationInput,
        where: types.USER_likes_RECPIESWhereInput,
    ) -> int:
        """Update multiple USER_likes_RECPIES records

        Parameters
        ----------
        data
            USER_likes_RECPIES data to update the selected USER_likes_RECPIES records to
        where
            Filter to select the USER_likes_RECPIES records to update

        Returns
        -------
        int
            The total number of USER_likes_RECPIES records that were updated

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # update all USER_likes_RECPIES records
        total = await USER_likes_RECPIES.prisma().update_many(
            data={
                'RECIPE_id': 861472101
            },
            where={}
        )
        ```
        """
        resp = await self._client._execute(
            method='update_many',
            model=self._model,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    @overload
    async def count(
        self,
        select: None = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.USER_likes_RECPIESWhereInput] = None,
        cursor: Optional[types.USER_likes_RECPIESWhereUniqueInput] = None,
    ) -> int:
        """Count the number of USER_likes_RECPIES records present in the database

        Parameters
        ----------
        select
            Select the USER_likes_RECPIES fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            USER_likes_RECPIES filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.USER_likes_RECPIESCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await USER_likes_RECPIES.prisma().count()

        # results: prisma.types.USER_likes_RECPIESCountAggregateOutput
        results = await USER_likes_RECPIES.prisma().count(
            select={
                '_all': True,
                'USER_id': True,
            },
        )
        ```
        """


    @overload
    async def count(
        self,
        select: types.USER_likes_RECPIESCountAggregateInput,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.USER_likes_RECPIESWhereInput] = None,
        cursor: Optional[types.USER_likes_RECPIESWhereUniqueInput] = None,
    ) -> types.USER_likes_RECPIESCountAggregateOutput:
        ...

    async def count(
        self,
        select: Optional[types.USER_likes_RECPIESCountAggregateInput] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.USER_likes_RECPIESWhereInput] = None,
        cursor: Optional[types.USER_likes_RECPIESWhereUniqueInput] = None,
    ) -> Union[int, types.USER_likes_RECPIESCountAggregateOutput]:
        """Count the number of USER_likes_RECPIES records present in the database

        Parameters
        ----------
        select
            Select the USER_likes_RECPIES fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            USER_likes_RECPIES filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.USER_likes_RECPIESCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await USER_likes_RECPIES.prisma().count()

        # results: prisma.types.USER_likes_RECPIESCountAggregateOutput
        results = await USER_likes_RECPIES.prisma().count(
            select={
                '_all': True,
                'RECIPE_id': True,
            },
        )
        ```
        """

        # TODO: this selection building should be moved to the QueryBuilder
        #
        # note the distinction between checking for `not select` here and `select is None`
        # later is to handle the case that the given select dictionary is empty, this
        # is a limitation of our types.
        if not select:
            root_selection = ['_count { _all }']
        else:

            root_selection = [
                '_count {{ {0} }}'.format(' '.join(k for k, v in select.items() if v is True))
            ]

        resp = await self._client._execute(
            method='count',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'cursor': cursor,
            },
            root_selection=root_selection,
        )

        if select is None:
            return cast(int, resp['data']['result']['_count']['_all'])
        else:
            return cast(types.USER_likes_RECPIESCountAggregateOutput, resp['data']['result']['_count'])

    async def delete_many(
        self,
        where: Optional[types.USER_likes_RECPIESWhereInput] = None
    ) -> int:
        """Delete multiple USER_likes_RECPIES records.

        Parameters
        ----------
        where
            Optional USER_likes_RECPIES filter to find the records to be deleted

        Returns
        -------
        int
            The total number of USER_likes_RECPIES records that were deleted

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # delete all USER_likes_RECPIES records
        total = await USER_likes_RECPIES.prisma().delete_many()
        ```
        """
        resp = await self._client._execute(
            method='delete_many',
            model=self._model,
            arguments={'where': where},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    # TODO: make this easier to work with safely, currently output fields are typed as
    #       not required, we should refactor the return type
    # TODO: consider returning a Dict where the keys are a Tuple of the `by` selection
    # TODO: statically type that the order argument is required when take or skip are present
    async def group_by(
        self,
        by: List['types.USER_likes_RECPIESScalarFieldKeys'],
        *,
        where: Optional['types.USER_likes_RECPIESWhereInput'] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        avg: Optional['types.USER_likes_RECPIESAvgAggregateInput'] = None,
        sum: Optional['types.USER_likes_RECPIESSumAggregateInput'] = None,
        min: Optional['types.USER_likes_RECPIESMinAggregateInput'] = None,
        max: Optional['types.USER_likes_RECPIESMaxAggregateInput'] = None,
        having: Optional['types.USER_likes_RECPIESScalarWhereWithAggregatesInput'] = None,
        count: Optional[Union[bool, 'types.USER_likes_RECPIESCountAggregateInput']] = None,
        order: Optional[Union[Mapping['types.USER_likes_RECPIESScalarFieldKeys', 'types.SortOrder'], List[Mapping['types.USER_likes_RECPIESScalarFieldKeys', 'types.SortOrder']]]] = None,
    ) -> List['types.USER_likes_RECPIESGroupByOutput']:
        """Group USER_likes_RECPIES records by one or more field values and perform aggregations
        each group such as finding the average.

        Parameters
        ----------
        by
            List of scalar USER_likes_RECPIES fields to group records by
        where
            USER_likes_RECPIES filter to select records
        take
            Limit the maximum number of USER_likes_RECPIES records returned
        skip
            Ignore the first N records
        avg
            Adds the average of all values of the specified fields to the `_avg` field
            in the returned data.
        sum
            Adds the sum of all values of the specified fields to the `_sum` field
            in the returned data.
        min
            Adds the smallest available value for the specified fields to the `_min` field
            in the returned data.
        max
            Adds the largest available value for the specified fields to the `_max` field
            in the returned data.
        count
            Adds a count of non-fields to the `_count` field in the returned data.
        having
            Allows you to filter groups by an aggregate value - for example only return
            groups having an average age less than 50.
        order
            Lets you order the returned list by any property that is also present in `by`.
            Only **one** field is allowed at a time.

        Returns
        -------
        List[prisma.types.USER_likes_RECPIESGroupByOutput]
            A list of dictionaries representing the USER_likes_RECPIES record,
            this will also have additional fields present if aggregation arguments
            are used (see the above parameters)

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # group USER_likes_RECPIES records by USER_id values
        # and count how many records are in each group
        results = await USER_likes_RECPIES.prisma().group_by(
            ['USER_id'],
            count=True,
        )
        ```
        """
        if order is None:
            if take is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'take\' is present')

            if skip is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'skip\' is present')

        root_selection: List[str] = [*by]
        if avg is not None:
            root_selection.append(_select_fields('_avg', avg))

        if min is not None:
            root_selection.append(_select_fields('_min', min))

        if sum is not None:
            root_selection.append(_select_fields('_sum', sum))

        if max is not None:
            root_selection.append(_select_fields('_max', max))

        if count is not None:
            if count is True:
                root_selection.append('_count { _all }')
            elif isinstance(count, dict):
                root_selection.append(_select_fields('_count', count))

        resp = await self._client._execute(
            method='group_by',
            model=self._model,
            arguments={
                'by': by,
                'take': take,
                'skip': skip,
                'where': where,
                'having': having,
                'orderBy': order,
            },
            root_selection=root_selection,
        )
        return resp['data']['result']  # type: ignore[no-any-return]



def _select_fields(root: str, select: Mapping[str, Any]) -> str:
    """Helper to build a GraphQL selection string

    This is a work around until field selection is added to the query builder.
    """

    return root + ' {{ {0} }}'.format(' '.join(k for k, v in select.items() if v is True))


from . import models