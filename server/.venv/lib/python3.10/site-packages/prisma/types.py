# -*- coding: utf-8 -*-
# code generated by Prisma. DO NOT EDIT.
# pyright: reportUnusedImport=false
# fmt: off

# global imports for type checking
from builtins import bool as _bool
from builtins import int as _int
from builtins import float as _float
from builtins import str as _str
import sys
import decimal
import datetime
from typing import (
    TYPE_CHECKING,
    Optional,
    Iterable,
    Iterator,
    Sequence,
    Callable,
    ClassVar,
    NoReturn,
    TypeVar,
    Generic,
    Mapping,
    Tuple,
    Union,
    List,
    Dict,
    Type,
    Any,
    Set,
    overload,
    cast,
)
from typing_extensions import TypedDict, Literal


LiteralString = str
# -- template types.py.jinja --
from typing import TypeVar

import httpx
from .utils import _NoneType



# TODO: filters with aggregates should have their own recursive fields
# TODO: cleanup whitespace control
# TODO: add an argument to signify that the last iteration should be skipped


SortMode = Literal['default', 'insensitive']
SortOrder = Literal['asc', 'desc']


class _DatasourceOverrideOptional(TypedDict, total=False):
    env: str
    name: str


class DatasourceOverride(_DatasourceOverrideOptional):
    url: str


# NOTE: we don't support some options as their type hints are not publicly exposed
# https://github.com/encode/httpx/discussions/1977
class HttpConfig(TypedDict, total=False):
    app: Callable[[Mapping[str, Any], Any], Any]
    http1: bool
    http2: bool
    limits: httpx.Limits
    timeout: Union[None, float, httpx.Timeout]
    trust_env: bool
    max_redirects: int


# types that can be serialized to json by our query builder
Serializable = Union[
    None,
    bool,
    float,
    int,
    str,
    datetime.datetime,
    List[Any],
    Dict[None, Any],
    Dict[bool, Any],
    Dict[float, Any],
    Dict[int, Any],
    Dict[str, Any],
]


    

StringFilter = TypedDict(
    'StringFilter',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive1'],
        'mode': SortMode,
    },
    total=False,
)


StringFilterRecursive1 = TypedDict(
    'StringFilterRecursive1',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive2'],
        'mode': SortMode,
    },
    total=False,
)


StringFilterRecursive2 = TypedDict(
    'StringFilterRecursive2',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive3'],
        'mode': SortMode,
    },
    total=False,
)


StringFilterRecursive3 = TypedDict(
    'StringFilterRecursive3',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive4'],
        'mode': SortMode,
    },
    total=False,
)


StringFilterRecursive4 = TypedDict(
    'StringFilterRecursive4',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
                'mode': SortMode,
    },
    total=False,
)


class StringWithAggregatesFilter(StringFilter, total=False):
    _max: 'StringFilter'
    _min: 'StringFilter'
    _sum: 'StringFilter'
    _avg: 'StringFilter'
    _count: 'IntFilter'


    

DateTimeFilter = TypedDict(
    'DateTimeFilter',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive1'],
    },
    total=False,
)


DateTimeFilterRecursive1 = TypedDict(
    'DateTimeFilterRecursive1',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive2'],
    },
    total=False,
)


DateTimeFilterRecursive2 = TypedDict(
    'DateTimeFilterRecursive2',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive3'],
    },
    total=False,
)


DateTimeFilterRecursive3 = TypedDict(
    'DateTimeFilterRecursive3',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive4'],
    },
    total=False,
)


DateTimeFilterRecursive4 = TypedDict(
    'DateTimeFilterRecursive4',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
            },
    total=False,
)


class DateTimeWithAggregatesFilter(DateTimeFilter, total=False):
    _max: 'DateTimeFilter'
    _min: 'DateTimeFilter'
    _sum: 'DateTimeFilter'
    _avg: 'DateTimeFilter'
    _count: 'IntFilter'


    

BooleanFilter = TypedDict(
    'BooleanFilter',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive1'],
    },
    total=False,
)


BooleanFilterRecursive1 = TypedDict(
    'BooleanFilterRecursive1',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive2'],
    },
    total=False,
)


BooleanFilterRecursive2 = TypedDict(
    'BooleanFilterRecursive2',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive3'],
    },
    total=False,
)


BooleanFilterRecursive3 = TypedDict(
    'BooleanFilterRecursive3',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive4'],
    },
    total=False,
)


BooleanFilterRecursive4 = TypedDict(
    'BooleanFilterRecursive4',
    {
        'equals': bool,
            },
    total=False,
)


class BooleanWithAggregatesFilter(BooleanFilter, total=False):
    _max: 'BooleanFilter'
    _min: 'BooleanFilter'
    _sum: 'BooleanFilter'
    _avg: 'BooleanFilter'
    _count: 'IntFilter'


    

IntFilter = TypedDict(
    'IntFilter',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive1'],
    },
    total=False,
)


IntFilterRecursive1 = TypedDict(
    'IntFilterRecursive1',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive2'],
    },
    total=False,
)


IntFilterRecursive2 = TypedDict(
    'IntFilterRecursive2',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive3'],
    },
    total=False,
)


IntFilterRecursive3 = TypedDict(
    'IntFilterRecursive3',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive4'],
    },
    total=False,
)


IntFilterRecursive4 = TypedDict(
    'IntFilterRecursive4',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
            },
    total=False,
)


class IntWithAggregatesFilter(IntFilter, total=False):
    _max: 'IntFilter'
    _min: 'IntFilter'
    _sum: 'IntFilter'
    _avg: 'IntFilter'
    _count: 'IntFilter'


BigIntFilter = IntFilter
BigIntWithAggregatesFilter = IntWithAggregatesFilter
    

FloatFilter = TypedDict(
    'FloatFilter',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive1'],
    },
    total=False,
)


FloatFilterRecursive1 = TypedDict(
    'FloatFilterRecursive1',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive2'],
    },
    total=False,
)


FloatFilterRecursive2 = TypedDict(
    'FloatFilterRecursive2',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive3'],
    },
    total=False,
)


FloatFilterRecursive3 = TypedDict(
    'FloatFilterRecursive3',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive4'],
    },
    total=False,
)


FloatFilterRecursive4 = TypedDict(
    'FloatFilterRecursive4',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
            },
    total=False,
)


class FloatWithAggregatesFilter(FloatFilter, total=False):
    _max: 'FloatFilter'
    _min: 'FloatFilter'
    _sum: 'FloatFilter'
    _avg: 'FloatFilter'
    _count: 'IntFilter'


    

BytesFilter = TypedDict(
    'BytesFilter',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive1'],
    },
    total=False,
)


BytesFilterRecursive1 = TypedDict(
    'BytesFilterRecursive1',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive2'],
    },
    total=False,
)


BytesFilterRecursive2 = TypedDict(
    'BytesFilterRecursive2',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive3'],
    },
    total=False,
)


BytesFilterRecursive3 = TypedDict(
    'BytesFilterRecursive3',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive4'],
    },
    total=False,
)


BytesFilterRecursive4 = TypedDict(
    'BytesFilterRecursive4',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
            },
    total=False,
)


class BytesWithAggregatesFilter(BytesFilter, total=False):
    _max: 'BytesFilter'
    _min: 'BytesFilter'
    _sum: 'BytesFilter'
    _avg: 'BytesFilter'
    _count: 'IntFilter'


# TODO: preview feature for improving JSON filtering
JsonFilter = TypedDict(
    'JsonFilter',
    {
        'equals': 'fields.Json',
        'not': 'fields.Json',
    },
    total=False,
)


class JsonWithAggregatesFilter(JsonFilter, total=False):
    _max: 'JsonFilter'
    _min: 'JsonFilter'
    _sum: 'JsonFilter'
    _avg: 'JsonFilter'
    _count: 'IntFilter'


    

DecimalFilter = TypedDict(
    'DecimalFilter',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive1'],
    },
    total=False,
)


DecimalFilterRecursive1 = TypedDict(
    'DecimalFilterRecursive1',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive2'],
    },
    total=False,
)


DecimalFilterRecursive2 = TypedDict(
    'DecimalFilterRecursive2',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive3'],
    },
    total=False,
)


DecimalFilterRecursive3 = TypedDict(
    'DecimalFilterRecursive3',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive4'],
    },
    total=False,
)


DecimalFilterRecursive4 = TypedDict(
    'DecimalFilterRecursive4',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
            },
    total=False,
)


class DecimalWithAggregatesFilter(StringFilter, total=False):
    _max: 'DecimalFilter'
    _min: 'DecimalFilter'
    _sum: 'DecimalFilter'
    _avg: 'DecimalFilter'
    _count: 'IntFilter'


class _FloatSetInput(TypedDict):
    set: float


class _FloatDivideInput(TypedDict):
    divide: float


class _FloatMultiplyInput(TypedDict):
    multiply: float


class _FloatIncrementInput(TypedDict):
    increment: float


class _FloatDecrementInput(TypedDict):
    decrement: float


class _IntSetInput(TypedDict):
    set: int


class _IntDivideInput(TypedDict):
    divide: int


class _IntMultiplyInput(TypedDict):
    multiply: int


class _IntIncrementInput(TypedDict):
    increment: int


class _IntDecrementInput(TypedDict):
    decrement: int


AtomicFloatInput = Union[
    _FloatSetInput,
    _FloatDivideInput,
    _FloatMultiplyInput,
    _FloatIncrementInput,
    _FloatDecrementInput,
]
AtomicIntInput = Union[
    _IntSetInput,
    _IntDivideInput,
    _IntMultiplyInput,
    _IntIncrementInput,
    _IntDecrementInput,
]
AtomicBigIntInput = AtomicIntInput

class _StringListFilterEqualsInput(TypedDict):
    equals: Optional[List[_str]]


class _StringListFilterHasInput(TypedDict):
    has: _str


class _StringListFilterHasEveryInput(TypedDict):
    has_every: List[_str]


class _StringListFilterHasSomeInput(TypedDict):
    has_some: List[_str]


class _StringListFilterIsEmptyInput(TypedDict):
    is_empty: bool


StringListFilter = Union[
    _StringListFilterHasInput,
    _StringListFilterEqualsInput,
    _StringListFilterHasSomeInput,
    _StringListFilterIsEmptyInput,
    _StringListFilterHasEveryInput,
]


class _StringListUpdateSet(TypedDict):
    set: List[_str]


class _StringListUpdatePush(TypedDict):
    push: List[_str]


StringListUpdate = Union[
    List[_str],
    _StringListUpdateSet,
    _StringListUpdatePush,
]

class _BytesListFilterEqualsInput(TypedDict):
    equals: Optional[List['fields.Base64']]


class _BytesListFilterHasInput(TypedDict):
    has: 'fields.Base64'


class _BytesListFilterHasEveryInput(TypedDict):
    has_every: List['fields.Base64']


class _BytesListFilterHasSomeInput(TypedDict):
    has_some: List['fields.Base64']


class _BytesListFilterIsEmptyInput(TypedDict):
    is_empty: bool


BytesListFilter = Union[
    _BytesListFilterHasInput,
    _BytesListFilterEqualsInput,
    _BytesListFilterHasSomeInput,
    _BytesListFilterIsEmptyInput,
    _BytesListFilterHasEveryInput,
]


class _BytesListUpdateSet(TypedDict):
    set: List['fields.Base64']


class _BytesListUpdatePush(TypedDict):
    push: List['fields.Base64']


BytesListUpdate = Union[
    List['fields.Base64'],
    _BytesListUpdateSet,
    _BytesListUpdatePush,
]

class _DateTimeListFilterEqualsInput(TypedDict):
    equals: Optional[List[datetime.datetime]]


class _DateTimeListFilterHasInput(TypedDict):
    has: datetime.datetime


class _DateTimeListFilterHasEveryInput(TypedDict):
    has_every: List[datetime.datetime]


class _DateTimeListFilterHasSomeInput(TypedDict):
    has_some: List[datetime.datetime]


class _DateTimeListFilterIsEmptyInput(TypedDict):
    is_empty: bool


DateTimeListFilter = Union[
    _DateTimeListFilterHasInput,
    _DateTimeListFilterEqualsInput,
    _DateTimeListFilterHasSomeInput,
    _DateTimeListFilterIsEmptyInput,
    _DateTimeListFilterHasEveryInput,
]


class _DateTimeListUpdateSet(TypedDict):
    set: List[datetime.datetime]


class _DateTimeListUpdatePush(TypedDict):
    push: List[datetime.datetime]


DateTimeListUpdate = Union[
    List[datetime.datetime],
    _DateTimeListUpdateSet,
    _DateTimeListUpdatePush,
]

class _BooleanListFilterEqualsInput(TypedDict):
    equals: Optional[List[_bool]]


class _BooleanListFilterHasInput(TypedDict):
    has: _bool


class _BooleanListFilterHasEveryInput(TypedDict):
    has_every: List[_bool]


class _BooleanListFilterHasSomeInput(TypedDict):
    has_some: List[_bool]


class _BooleanListFilterIsEmptyInput(TypedDict):
    is_empty: bool


BooleanListFilter = Union[
    _BooleanListFilterHasInput,
    _BooleanListFilterEqualsInput,
    _BooleanListFilterHasSomeInput,
    _BooleanListFilterIsEmptyInput,
    _BooleanListFilterHasEveryInput,
]


class _BooleanListUpdateSet(TypedDict):
    set: List[_bool]


class _BooleanListUpdatePush(TypedDict):
    push: List[_bool]


BooleanListUpdate = Union[
    List[_bool],
    _BooleanListUpdateSet,
    _BooleanListUpdatePush,
]

class _IntListFilterEqualsInput(TypedDict):
    equals: Optional[List[_int]]


class _IntListFilterHasInput(TypedDict):
    has: _int


class _IntListFilterHasEveryInput(TypedDict):
    has_every: List[_int]


class _IntListFilterHasSomeInput(TypedDict):
    has_some: List[_int]


class _IntListFilterIsEmptyInput(TypedDict):
    is_empty: bool


IntListFilter = Union[
    _IntListFilterHasInput,
    _IntListFilterEqualsInput,
    _IntListFilterHasSomeInput,
    _IntListFilterIsEmptyInput,
    _IntListFilterHasEveryInput,
]


class _IntListUpdateSet(TypedDict):
    set: List[_int]


class _IntListUpdatePush(TypedDict):
    push: List[_int]


IntListUpdate = Union[
    List[_int],
    _IntListUpdateSet,
    _IntListUpdatePush,
]

class _BigIntListFilterEqualsInput(TypedDict):
    equals: Optional[List[_int]]


class _BigIntListFilterHasInput(TypedDict):
    has: _int


class _BigIntListFilterHasEveryInput(TypedDict):
    has_every: List[_int]


class _BigIntListFilterHasSomeInput(TypedDict):
    has_some: List[_int]


class _BigIntListFilterIsEmptyInput(TypedDict):
    is_empty: bool


BigIntListFilter = Union[
    _BigIntListFilterHasInput,
    _BigIntListFilterEqualsInput,
    _BigIntListFilterHasSomeInput,
    _BigIntListFilterIsEmptyInput,
    _BigIntListFilterHasEveryInput,
]


class _BigIntListUpdateSet(TypedDict):
    set: List[_int]


class _BigIntListUpdatePush(TypedDict):
    push: List[_int]


BigIntListUpdate = Union[
    List[_int],
    _BigIntListUpdateSet,
    _BigIntListUpdatePush,
]

class _FloatListFilterEqualsInput(TypedDict):
    equals: Optional[List[_float]]


class _FloatListFilterHasInput(TypedDict):
    has: _float


class _FloatListFilterHasEveryInput(TypedDict):
    has_every: List[_float]


class _FloatListFilterHasSomeInput(TypedDict):
    has_some: List[_float]


class _FloatListFilterIsEmptyInput(TypedDict):
    is_empty: bool


FloatListFilter = Union[
    _FloatListFilterHasInput,
    _FloatListFilterEqualsInput,
    _FloatListFilterHasSomeInput,
    _FloatListFilterIsEmptyInput,
    _FloatListFilterHasEveryInput,
]


class _FloatListUpdateSet(TypedDict):
    set: List[_float]


class _FloatListUpdatePush(TypedDict):
    push: List[_float]


FloatListUpdate = Union[
    List[_float],
    _FloatListUpdateSet,
    _FloatListUpdatePush,
]

class _JsonListFilterEqualsInput(TypedDict):
    equals: Optional[List['fields.Json']]


class _JsonListFilterHasInput(TypedDict):
    has: 'fields.Json'


class _JsonListFilterHasEveryInput(TypedDict):
    has_every: List['fields.Json']


class _JsonListFilterHasSomeInput(TypedDict):
    has_some: List['fields.Json']


class _JsonListFilterIsEmptyInput(TypedDict):
    is_empty: bool


JsonListFilter = Union[
    _JsonListFilterHasInput,
    _JsonListFilterEqualsInput,
    _JsonListFilterHasSomeInput,
    _JsonListFilterIsEmptyInput,
    _JsonListFilterHasEveryInput,
]


class _JsonListUpdateSet(TypedDict):
    set: List['fields.Json']


class _JsonListUpdatePush(TypedDict):
    push: List['fields.Json']


JsonListUpdate = Union[
    List['fields.Json'],
    _JsonListUpdateSet,
    _JsonListUpdatePush,
]

class _DecimalListFilterEqualsInput(TypedDict):
    equals: Optional[List[decimal.Decimal]]


class _DecimalListFilterHasInput(TypedDict):
    has: decimal.Decimal


class _DecimalListFilterHasEveryInput(TypedDict):
    has_every: List[decimal.Decimal]


class _DecimalListFilterHasSomeInput(TypedDict):
    has_some: List[decimal.Decimal]


class _DecimalListFilterIsEmptyInput(TypedDict):
    is_empty: bool


DecimalListFilter = Union[
    _DecimalListFilterHasInput,
    _DecimalListFilterEqualsInput,
    _DecimalListFilterHasSomeInput,
    _DecimalListFilterIsEmptyInput,
    _DecimalListFilterHasEveryInput,
]


class _DecimalListUpdateSet(TypedDict):
    set: List[decimal.Decimal]


class _DecimalListUpdatePush(TypedDict):
    push: List[decimal.Decimal]


DecimalListUpdate = Union[
    List[decimal.Decimal],
    _DecimalListUpdateSet,
    _DecimalListUpdatePush,
]


# RECPIES types

class RECPIESOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the RECPIES create method"""
    id: _int
    slug: Optional[_str]
    video_url: Optional[_str]
    thumbnail_url: Optional[_str]
    USER_likes_RECPIES: 'USER_likes_RECPIESCreateManyNestedWithoutRelationsInput'


class RECPIESCreateInput(RECPIESOptionalCreateInput):
    """Required arguments to the RECPIES create method"""
    name: _str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class RECPIESOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the RECPIES create method, without relations"""
    id: _int
    slug: Optional[_str]
    video_url: Optional[_str]
    thumbnail_url: Optional[_str]


class RECPIESCreateWithoutRelationsInput(RECPIESOptionalCreateWithoutRelationsInput):
    """Required arguments to the RECPIES create method, without relations"""
    name: _str


class RECPIESCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'RECPIESCreateWithoutRelationsInput'
    connect: 'RECPIESWhereUniqueInput'


class RECPIESCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['RECPIESCreateWithoutRelationsInput', List['RECPIESCreateWithoutRelationsInput']]
    connect: Union['RECPIESWhereUniqueInput', List['RECPIESWhereUniqueInput']]


_RECPIESWhereUnique_id_Input = TypedDict(
    '_RECPIESWhereUnique_id_Input',
    {
        'id': '_int',
    },
    total=True
)

RECPIESWhereUniqueInput = _RECPIESWhereUnique_id_Input


class RECPIESUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: Union[AtomicIntInput, _int]
    name: _str
    slug: Optional[_str]
    video_url: Optional[_str]
    thumbnail_url: Optional[_str]
    USER_likes_RECPIES: 'USER_likes_RECPIESUpdateManyWithoutRelationsInput'


class RECPIESUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: Union[AtomicIntInput, _int]
    name: _str
    slug: Optional[_str]
    video_url: Optional[_str]
    thumbnail_url: Optional[_str]


class RECPIESUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['RECPIESCreateWithoutRelationsInput']
    connect: List['RECPIESWhereUniqueInput']
    set: List['RECPIESWhereUniqueInput']
    disconnect: List['RECPIESWhereUniqueInput']
    delete: List['RECPIESWhereUniqueInput']

    # TODO
    # update: List['RECPIESUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['RECPIESUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['RECPIESScalarWhereInput']
    # upsert: List['RECPIESUpserteWithWhereUniqueWithoutRelationsInput']
    # connectOrCreate: List['RECPIESCreateOrConnectWithoutRelationsInput']


class RECPIESUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'RECPIESCreateWithoutRelationsInput'
    connect: 'RECPIESWhereUniqueInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'RECPIESUpdateInput'
    # upsert: 'RECPIESUpsertWithoutRelationsInput'
    # connectOrCreate: 'RECPIESCreateOrConnectWithoutRelationsInput'


class RECPIESUpsertInput(TypedDict):
    create: 'RECPIESCreateInput'
    update: 'RECPIESUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_RECPIES_id_OrderByInput = TypedDict(
    '_RECPIES_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_RECPIES_name_OrderByInput = TypedDict(
    '_RECPIES_name_OrderByInput',
    {
        'name': 'SortOrder',
    },
    total=True
)

_RECPIES_slug_OrderByInput = TypedDict(
    '_RECPIES_slug_OrderByInput',
    {
        'slug': 'SortOrder',
    },
    total=True
)

_RECPIES_video_url_OrderByInput = TypedDict(
    '_RECPIES_video_url_OrderByInput',
    {
        'video_url': 'SortOrder',
    },
    total=True
)

_RECPIES_thumbnail_url_OrderByInput = TypedDict(
    '_RECPIES_thumbnail_url_OrderByInput',
    {
        'thumbnail_url': 'SortOrder',
    },
    total=True
)

RECPIESOrderByInput = Union[
    '_RECPIES_id_OrderByInput',
    '_RECPIES_name_OrderByInput',
    '_RECPIES_slug_OrderByInput',
    '_RECPIES_video_url_OrderByInput',
    '_RECPIES_thumbnail_url_OrderByInput',
]



# recursive RECPIES types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

RECPIESRelationFilter = TypedDict(
    'RECPIESRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class RECPIESListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class RECPIESInclude(TypedDict, total=False):
    """RECPIES relational arguments"""
    USER_likes_RECPIES: Union[bool, 'FindManyUSER_likes_RECPIESArgsFromRECPIES']


    

class RECPIESIncludeFromRECPIES(TypedDict, total=False):
    """Relational arguments for RECPIES"""
    USER_likes_RECPIES: Union[bool, 'FindManyUSER_likes_RECPIESArgsFromRECPIESRecursive1']


class RECPIESIncludeFromRECPIESRecursive1(TypedDict, total=False):
    """Relational arguments for RECPIES"""
    USER_likes_RECPIES: Union[bool, 'FindManyUSER_likes_RECPIESArgsFromRECPIESRecursive2']


class RECPIESIncludeFromRECPIESRecursive2(TypedDict, total=False):
    """Relational arguments for RECPIES"""
    USER_likes_RECPIES: Union[bool, 'FindManyUSER_likes_RECPIESArgsFromRECPIESRecursive3']


class RECPIESIncludeFromRECPIESRecursive3(TypedDict, total=False):
    """Relational arguments for RECPIES"""
    USER_likes_RECPIES: Union[bool, 'FindManyUSER_likes_RECPIESArgsFromRECPIESRecursive4']


class RECPIESIncludeFromRECPIESRecursive4(TypedDict, total=False):
    """Relational arguments for RECPIES"""

    

class RECPIESArgsFromRECPIES(TypedDict, total=False):
    """Arguments for RECPIES"""
    include: 'RECPIESIncludeFromRECPIESRecursive1'


class RECPIESArgsFromRECPIESRecursive1(TypedDict, total=False):
    """Arguments for RECPIES"""
    include: 'RECPIESIncludeFromRECPIESRecursive2'


class RECPIESArgsFromRECPIESRecursive2(TypedDict, total=False):
    """Arguments for RECPIES"""
    include: 'RECPIESIncludeFromRECPIESRecursive3'


class RECPIESArgsFromRECPIESRecursive3(TypedDict, total=False):
    """Arguments for RECPIES"""
    include: 'RECPIESIncludeFromRECPIESRecursive4'


class RECPIESArgsFromRECPIESRecursive4(TypedDict, total=False):
    """Arguments for RECPIES"""
    
    

class FindManyRECPIESArgsFromRECPIES(TypedDict, total=False):
    """Arguments for RECPIES"""
    take: int
    skip: int
    order_by: Union['RECPIESOrderByInput', List['RECPIESOrderByInput']]
    where: 'RECPIESWhereInput'
    cursor: 'RECPIESWhereUniqueInput'
    distinct: List['RECPIESScalarFieldKeys']
    include: 'RECPIESIncludeFromRECPIESRecursive1'


class FindManyRECPIESArgsFromRECPIESRecursive1(TypedDict, total=False):
    """Arguments for RECPIES"""
    take: int
    skip: int
    order_by: Union['RECPIESOrderByInput', List['RECPIESOrderByInput']]
    where: 'RECPIESWhereInput'
    cursor: 'RECPIESWhereUniqueInput'
    distinct: List['RECPIESScalarFieldKeys']
    include: 'RECPIESIncludeFromRECPIESRecursive2'


class FindManyRECPIESArgsFromRECPIESRecursive2(TypedDict, total=False):
    """Arguments for RECPIES"""
    take: int
    skip: int
    order_by: Union['RECPIESOrderByInput', List['RECPIESOrderByInput']]
    where: 'RECPIESWhereInput'
    cursor: 'RECPIESWhereUniqueInput'
    distinct: List['RECPIESScalarFieldKeys']
    include: 'RECPIESIncludeFromRECPIESRecursive3'


class FindManyRECPIESArgsFromRECPIESRecursive3(TypedDict, total=False):
    """Arguments for RECPIES"""
    take: int
    skip: int
    order_by: Union['RECPIESOrderByInput', List['RECPIESOrderByInput']]
    where: 'RECPIESWhereInput'
    cursor: 'RECPIESWhereUniqueInput'
    distinct: List['RECPIESScalarFieldKeys']
    include: 'RECPIESIncludeFromRECPIESRecursive4'


class FindManyRECPIESArgsFromRECPIESRecursive4(TypedDict, total=False):
    """Arguments for RECPIES"""
    take: int
    skip: int
    order_by: Union['RECPIESOrderByInput', List['RECPIESOrderByInput']]
    where: 'RECPIESWhereInput'
    cursor: 'RECPIESWhereUniqueInput'
    distinct: List['RECPIESScalarFieldKeys']
    
    

class USERSIncludeFromRECPIES(TypedDict, total=False):
    """Relational arguments for RECPIES"""
    USER_likes_RECPIES: Union[bool, 'FindManyUSER_likes_RECPIESArgsFromRECPIESRecursive1']


class USERSIncludeFromRECPIESRecursive1(TypedDict, total=False):
    """Relational arguments for RECPIES"""
    USER_likes_RECPIES: Union[bool, 'FindManyUSER_likes_RECPIESArgsFromRECPIESRecursive2']


class USERSIncludeFromRECPIESRecursive2(TypedDict, total=False):
    """Relational arguments for RECPIES"""
    USER_likes_RECPIES: Union[bool, 'FindManyUSER_likes_RECPIESArgsFromRECPIESRecursive3']


class USERSIncludeFromRECPIESRecursive3(TypedDict, total=False):
    """Relational arguments for RECPIES"""
    USER_likes_RECPIES: Union[bool, 'FindManyUSER_likes_RECPIESArgsFromRECPIESRecursive4']


class USERSIncludeFromRECPIESRecursive4(TypedDict, total=False):
    """Relational arguments for RECPIES"""

    

class USERSArgsFromRECPIES(TypedDict, total=False):
    """Arguments for RECPIES"""
    include: 'USERSIncludeFromUSERSRecursive1'


class USERSArgsFromRECPIESRecursive1(TypedDict, total=False):
    """Arguments for RECPIES"""
    include: 'USERSIncludeFromUSERSRecursive2'


class USERSArgsFromRECPIESRecursive2(TypedDict, total=False):
    """Arguments for RECPIES"""
    include: 'USERSIncludeFromUSERSRecursive3'


class USERSArgsFromRECPIESRecursive3(TypedDict, total=False):
    """Arguments for RECPIES"""
    include: 'USERSIncludeFromUSERSRecursive4'


class USERSArgsFromRECPIESRecursive4(TypedDict, total=False):
    """Arguments for RECPIES"""
    
    

class FindManyUSERSArgsFromRECPIES(TypedDict, total=False):
    """Arguments for RECPIES"""
    take: int
    skip: int
    order_by: Union['USERSOrderByInput', List['USERSOrderByInput']]
    where: 'USERSWhereInput'
    cursor: 'USERSWhereUniqueInput'
    distinct: List['USERSScalarFieldKeys']
    include: 'USERSIncludeFromUSERSRecursive1'


class FindManyUSERSArgsFromRECPIESRecursive1(TypedDict, total=False):
    """Arguments for RECPIES"""
    take: int
    skip: int
    order_by: Union['USERSOrderByInput', List['USERSOrderByInput']]
    where: 'USERSWhereInput'
    cursor: 'USERSWhereUniqueInput'
    distinct: List['USERSScalarFieldKeys']
    include: 'USERSIncludeFromUSERSRecursive2'


class FindManyUSERSArgsFromRECPIESRecursive2(TypedDict, total=False):
    """Arguments for RECPIES"""
    take: int
    skip: int
    order_by: Union['USERSOrderByInput', List['USERSOrderByInput']]
    where: 'USERSWhereInput'
    cursor: 'USERSWhereUniqueInput'
    distinct: List['USERSScalarFieldKeys']
    include: 'USERSIncludeFromUSERSRecursive3'


class FindManyUSERSArgsFromRECPIESRecursive3(TypedDict, total=False):
    """Arguments for RECPIES"""
    take: int
    skip: int
    order_by: Union['USERSOrderByInput', List['USERSOrderByInput']]
    where: 'USERSWhereInput'
    cursor: 'USERSWhereUniqueInput'
    distinct: List['USERSScalarFieldKeys']
    include: 'USERSIncludeFromUSERSRecursive4'


class FindManyUSERSArgsFromRECPIESRecursive4(TypedDict, total=False):
    """Arguments for RECPIES"""
    take: int
    skip: int
    order_by: Union['USERSOrderByInput', List['USERSOrderByInput']]
    where: 'USERSWhereInput'
    cursor: 'USERSWhereUniqueInput'
    distinct: List['USERSScalarFieldKeys']
    
    

class USER_likes_RECPIESIncludeFromRECPIES(TypedDict, total=False):
    """Relational arguments for RECPIES"""
    user: Union[bool, 'USERSArgsFromRECPIESRecursive1']
    recipe: Union[bool, 'RECPIESArgsFromRECPIESRecursive1']


class USER_likes_RECPIESIncludeFromRECPIESRecursive1(TypedDict, total=False):
    """Relational arguments for RECPIES"""
    user: Union[bool, 'USERSArgsFromRECPIESRecursive2']
    recipe: Union[bool, 'RECPIESArgsFromRECPIESRecursive2']


class USER_likes_RECPIESIncludeFromRECPIESRecursive2(TypedDict, total=False):
    """Relational arguments for RECPIES"""
    user: Union[bool, 'USERSArgsFromRECPIESRecursive3']
    recipe: Union[bool, 'RECPIESArgsFromRECPIESRecursive3']


class USER_likes_RECPIESIncludeFromRECPIESRecursive3(TypedDict, total=False):
    """Relational arguments for RECPIES"""
    user: Union[bool, 'USERSArgsFromRECPIESRecursive4']
    recipe: Union[bool, 'RECPIESArgsFromRECPIESRecursive4']


class USER_likes_RECPIESIncludeFromRECPIESRecursive4(TypedDict, total=False):
    """Relational arguments for RECPIES"""

    

class USER_likes_RECPIESArgsFromRECPIES(TypedDict, total=False):
    """Arguments for RECPIES"""
    include: 'USER_likes_RECPIESIncludeFromUSER_likes_RECPIESRecursive1'


class USER_likes_RECPIESArgsFromRECPIESRecursive1(TypedDict, total=False):
    """Arguments for RECPIES"""
    include: 'USER_likes_RECPIESIncludeFromUSER_likes_RECPIESRecursive2'


class USER_likes_RECPIESArgsFromRECPIESRecursive2(TypedDict, total=False):
    """Arguments for RECPIES"""
    include: 'USER_likes_RECPIESIncludeFromUSER_likes_RECPIESRecursive3'


class USER_likes_RECPIESArgsFromRECPIESRecursive3(TypedDict, total=False):
    """Arguments for RECPIES"""
    include: 'USER_likes_RECPIESIncludeFromUSER_likes_RECPIESRecursive4'


class USER_likes_RECPIESArgsFromRECPIESRecursive4(TypedDict, total=False):
    """Arguments for RECPIES"""
    
    

class FindManyUSER_likes_RECPIESArgsFromRECPIES(TypedDict, total=False):
    """Arguments for RECPIES"""
    take: int
    skip: int
    order_by: Union['USER_likes_RECPIESOrderByInput', List['USER_likes_RECPIESOrderByInput']]
    where: 'USER_likes_RECPIESWhereInput'
    cursor: 'USER_likes_RECPIESWhereUniqueInput'
    distinct: List['USER_likes_RECPIESScalarFieldKeys']
    include: 'USER_likes_RECPIESIncludeFromUSER_likes_RECPIESRecursive1'


class FindManyUSER_likes_RECPIESArgsFromRECPIESRecursive1(TypedDict, total=False):
    """Arguments for RECPIES"""
    take: int
    skip: int
    order_by: Union['USER_likes_RECPIESOrderByInput', List['USER_likes_RECPIESOrderByInput']]
    where: 'USER_likes_RECPIESWhereInput'
    cursor: 'USER_likes_RECPIESWhereUniqueInput'
    distinct: List['USER_likes_RECPIESScalarFieldKeys']
    include: 'USER_likes_RECPIESIncludeFromUSER_likes_RECPIESRecursive2'


class FindManyUSER_likes_RECPIESArgsFromRECPIESRecursive2(TypedDict, total=False):
    """Arguments for RECPIES"""
    take: int
    skip: int
    order_by: Union['USER_likes_RECPIESOrderByInput', List['USER_likes_RECPIESOrderByInput']]
    where: 'USER_likes_RECPIESWhereInput'
    cursor: 'USER_likes_RECPIESWhereUniqueInput'
    distinct: List['USER_likes_RECPIESScalarFieldKeys']
    include: 'USER_likes_RECPIESIncludeFromUSER_likes_RECPIESRecursive3'


class FindManyUSER_likes_RECPIESArgsFromRECPIESRecursive3(TypedDict, total=False):
    """Arguments for RECPIES"""
    take: int
    skip: int
    order_by: Union['USER_likes_RECPIESOrderByInput', List['USER_likes_RECPIESOrderByInput']]
    where: 'USER_likes_RECPIESWhereInput'
    cursor: 'USER_likes_RECPIESWhereUniqueInput'
    distinct: List['USER_likes_RECPIESScalarFieldKeys']
    include: 'USER_likes_RECPIESIncludeFromUSER_likes_RECPIESRecursive4'


class FindManyUSER_likes_RECPIESArgsFromRECPIESRecursive4(TypedDict, total=False):
    """Arguments for RECPIES"""
    take: int
    skip: int
    order_by: Union['USER_likes_RECPIESOrderByInput', List['USER_likes_RECPIESOrderByInput']]
    where: 'USER_likes_RECPIESWhereInput'
    cursor: 'USER_likes_RECPIESWhereUniqueInput'
    distinct: List['USER_likes_RECPIESScalarFieldKeys']
    


FindManyRECPIESArgs = FindManyRECPIESArgsFromRECPIES
FindFirstRECPIESArgs = FindManyRECPIESArgsFromRECPIES


    

class RECPIESWhereInput(TypedDict, total=False):
    """RECPIES arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    name: Union[_str, 'types.StringFilter']
    slug: Union[None, _str, 'types.StringFilter']
    video_url: Union[None, _str, 'types.StringFilter']
    thumbnail_url: Union[None, _str, 'types.StringFilter']
    USER_likes_RECPIES: 'USER_likes_RECPIESListRelationFilter'

    # should be noted that AND and NOT should be Union['RECPIESWhereInputRecursive1', List['RECPIESWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['RECPIESWhereInputRecursive1']
    OR: List['RECPIESWhereInputRecursive1']
    NOT: List['RECPIESWhereInputRecursive1']


class RECPIESWhereInputRecursive1(TypedDict, total=False):
    """RECPIES arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    name: Union[_str, 'types.StringFilter']
    slug: Union[None, _str, 'types.StringFilter']
    video_url: Union[None, _str, 'types.StringFilter']
    thumbnail_url: Union[None, _str, 'types.StringFilter']
    USER_likes_RECPIES: 'USER_likes_RECPIESListRelationFilter'

    # should be noted that AND and NOT should be Union['RECPIESWhereInputRecursive2', List['RECPIESWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['RECPIESWhereInputRecursive2']
    OR: List['RECPIESWhereInputRecursive2']
    NOT: List['RECPIESWhereInputRecursive2']


class RECPIESWhereInputRecursive2(TypedDict, total=False):
    """RECPIES arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    name: Union[_str, 'types.StringFilter']
    slug: Union[None, _str, 'types.StringFilter']
    video_url: Union[None, _str, 'types.StringFilter']
    thumbnail_url: Union[None, _str, 'types.StringFilter']
    USER_likes_RECPIES: 'USER_likes_RECPIESListRelationFilter'

    # should be noted that AND and NOT should be Union['RECPIESWhereInputRecursive3', List['RECPIESWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['RECPIESWhereInputRecursive3']
    OR: List['RECPIESWhereInputRecursive3']
    NOT: List['RECPIESWhereInputRecursive3']


class RECPIESWhereInputRecursive3(TypedDict, total=False):
    """RECPIES arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    name: Union[_str, 'types.StringFilter']
    slug: Union[None, _str, 'types.StringFilter']
    video_url: Union[None, _str, 'types.StringFilter']
    thumbnail_url: Union[None, _str, 'types.StringFilter']
    USER_likes_RECPIES: 'USER_likes_RECPIESListRelationFilter'

    # should be noted that AND and NOT should be Union['RECPIESWhereInputRecursive4', List['RECPIESWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['RECPIESWhereInputRecursive4']
    OR: List['RECPIESWhereInputRecursive4']
    NOT: List['RECPIESWhereInputRecursive4']


class RECPIESWhereInputRecursive4(TypedDict, total=False):
    """RECPIES arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    name: Union[_str, 'types.StringFilter']
    slug: Union[None, _str, 'types.StringFilter']
    video_url: Union[None, _str, 'types.StringFilter']
    thumbnail_url: Union[None, _str, 'types.StringFilter']
    USER_likes_RECPIES: 'USER_likes_RECPIESListRelationFilter'



# aggregate RECPIES types


    

class RECPIESScalarWhereWithAggregatesInput(TypedDict, total=False):
    """RECPIES arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    slug: Union[_str, 'types.StringWithAggregatesFilter']
    video_url: Union[_str, 'types.StringWithAggregatesFilter']
    thumbnail_url: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['RECPIESScalarWhereWithAggregatesInputRecursive1']
    OR: List['RECPIESScalarWhereWithAggregatesInputRecursive1']
    NOT: List['RECPIESScalarWhereWithAggregatesInputRecursive1']


class RECPIESScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """RECPIES arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    slug: Union[_str, 'types.StringWithAggregatesFilter']
    video_url: Union[_str, 'types.StringWithAggregatesFilter']
    thumbnail_url: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['RECPIESScalarWhereWithAggregatesInputRecursive2']
    OR: List['RECPIESScalarWhereWithAggregatesInputRecursive2']
    NOT: List['RECPIESScalarWhereWithAggregatesInputRecursive2']


class RECPIESScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """RECPIES arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    slug: Union[_str, 'types.StringWithAggregatesFilter']
    video_url: Union[_str, 'types.StringWithAggregatesFilter']
    thumbnail_url: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['RECPIESScalarWhereWithAggregatesInputRecursive3']
    OR: List['RECPIESScalarWhereWithAggregatesInputRecursive3']
    NOT: List['RECPIESScalarWhereWithAggregatesInputRecursive3']


class RECPIESScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """RECPIES arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    slug: Union[_str, 'types.StringWithAggregatesFilter']
    video_url: Union[_str, 'types.StringWithAggregatesFilter']
    thumbnail_url: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['RECPIESScalarWhereWithAggregatesInputRecursive4']
    OR: List['RECPIESScalarWhereWithAggregatesInputRecursive4']
    NOT: List['RECPIESScalarWhereWithAggregatesInputRecursive4']


class RECPIESScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """RECPIES arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    slug: Union[_str, 'types.StringWithAggregatesFilter']
    video_url: Union[_str, 'types.StringWithAggregatesFilter']
    thumbnail_url: Union[_str, 'types.StringWithAggregatesFilter']



class RECPIESGroupByOutput(TypedDict, total=False):
    id: _int
    name: _str
    slug: _str
    video_url: _str
    thumbnail_url: _str
    _sum: 'RECPIESSumAggregateOutput'
    _avg: 'RECPIESAvgAggregateOutput'
    _min: 'RECPIESMinAggregateOutput'
    _max: 'RECPIESMaxAggregateOutput'
    _count: 'RECPIESCountAggregateOutput'


class RECPIESAvgAggregateOutput(TypedDict, total=False):
    """RECPIES output for aggregating averages"""
    id: float


class RECPIESSumAggregateOutput(TypedDict, total=False):
    """RECPIES output for aggregating sums"""
    id: _int


class RECPIESScalarAggregateOutput(TypedDict, total=False):
    """RECPIES output including scalar fields"""
    id: _int
    name: _str
    slug: _str
    video_url: _str
    thumbnail_url: _str


RECPIESMinAggregateOutput = RECPIESScalarAggregateOutput
RECPIESMaxAggregateOutput = RECPIESScalarAggregateOutput


class RECPIESMaxAggregateInput(TypedDict, total=False):
    """RECPIES input for aggregating by max"""
    id: bool
    name: bool
    slug: bool
    video_url: bool
    thumbnail_url: bool


class RECPIESMinAggregateInput(TypedDict, total=False):
    """RECPIES input for aggregating by min"""
    id: bool
    name: bool
    slug: bool
    video_url: bool
    thumbnail_url: bool


class RECPIESNumberAggregateInput(TypedDict, total=False):
    """RECPIES input for aggregating numbers"""
    id: bool


RECPIESAvgAggregateInput = RECPIESNumberAggregateInput
RECPIESSumAggregateInput = RECPIESNumberAggregateInput


RECPIESCountAggregateInput = TypedDict(
    'RECPIESCountAggregateInput',
    {
        'id': bool,
        'name': bool,
        'slug': bool,
        'video_url': bool,
        'thumbnail_url': bool,
        '_all': bool,
    },
    total=False,
)

RECPIESCountAggregateOutput = TypedDict(
    'RECPIESCountAggregateOutput',
    {
        'id': int,
        'name': int,
        'slug': int,
        'video_url': int,
        'thumbnail_url': int,
        '_all': int,
    },
    total=False,
)


RECPIESKeys = Literal[
    'id',
    'name',
    'slug',
    'video_url',
    'thumbnail_url',
    'USER_likes_RECPIES',
]
RECPIESScalarFieldKeys = Literal[
    'id',
    'name',
    'slug',
    'video_url',
    'thumbnail_url',
]
RECPIESScalarFieldKeysT = TypeVar('RECPIESScalarFieldKeysT', bound=RECPIESScalarFieldKeys)

RECPIESRelationalFieldKeys = Literal[
        'USER_likes_RECPIES',
    ]

# USERS types

class USERSOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the USERS create method"""
    id: _int
    name: Optional[_str]
    USER_likes_RECPIES: 'USER_likes_RECPIESCreateManyNestedWithoutRelationsInput'


class USERSCreateInput(USERSOptionalCreateInput):
    """Required arguments to the USERS create method"""


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class USERSOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the USERS create method, without relations"""
    id: _int
    name: Optional[_str]


class USERSCreateWithoutRelationsInput(USERSOptionalCreateWithoutRelationsInput):
    """Required arguments to the USERS create method, without relations"""


class USERSCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'USERSCreateWithoutRelationsInput'
    connect: 'USERSWhereUniqueInput'


class USERSCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['USERSCreateWithoutRelationsInput', List['USERSCreateWithoutRelationsInput']]
    connect: Union['USERSWhereUniqueInput', List['USERSWhereUniqueInput']]


_USERSWhereUnique_id_Input = TypedDict(
    '_USERSWhereUnique_id_Input',
    {
        'id': '_int',
    },
    total=True
)

USERSWhereUniqueInput = _USERSWhereUnique_id_Input


class USERSUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: Union[AtomicIntInput, _int]
    name: Optional[_str]
    USER_likes_RECPIES: 'USER_likes_RECPIESUpdateManyWithoutRelationsInput'


class USERSUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: Union[AtomicIntInput, _int]
    name: Optional[_str]


class USERSUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['USERSCreateWithoutRelationsInput']
    connect: List['USERSWhereUniqueInput']
    set: List['USERSWhereUniqueInput']
    disconnect: List['USERSWhereUniqueInput']
    delete: List['USERSWhereUniqueInput']

    # TODO
    # update: List['USERSUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['USERSUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['USERSScalarWhereInput']
    # upsert: List['USERSUpserteWithWhereUniqueWithoutRelationsInput']
    # connectOrCreate: List['USERSCreateOrConnectWithoutRelationsInput']


class USERSUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'USERSCreateWithoutRelationsInput'
    connect: 'USERSWhereUniqueInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'USERSUpdateInput'
    # upsert: 'USERSUpsertWithoutRelationsInput'
    # connectOrCreate: 'USERSCreateOrConnectWithoutRelationsInput'


class USERSUpsertInput(TypedDict):
    create: 'USERSCreateInput'
    update: 'USERSUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_USERS_id_OrderByInput = TypedDict(
    '_USERS_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_USERS_name_OrderByInput = TypedDict(
    '_USERS_name_OrderByInput',
    {
        'name': 'SortOrder',
    },
    total=True
)

USERSOrderByInput = Union[
    '_USERS_id_OrderByInput',
    '_USERS_name_OrderByInput',
]



# recursive USERS types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

USERSRelationFilter = TypedDict(
    'USERSRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class USERSListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class USERSInclude(TypedDict, total=False):
    """USERS relational arguments"""
    USER_likes_RECPIES: Union[bool, 'FindManyUSER_likes_RECPIESArgsFromUSERS']


    

class RECPIESIncludeFromUSERS(TypedDict, total=False):
    """Relational arguments for USERS"""
    USER_likes_RECPIES: Union[bool, 'FindManyUSER_likes_RECPIESArgsFromUSERSRecursive1']


class RECPIESIncludeFromUSERSRecursive1(TypedDict, total=False):
    """Relational arguments for USERS"""
    USER_likes_RECPIES: Union[bool, 'FindManyUSER_likes_RECPIESArgsFromUSERSRecursive2']


class RECPIESIncludeFromUSERSRecursive2(TypedDict, total=False):
    """Relational arguments for USERS"""
    USER_likes_RECPIES: Union[bool, 'FindManyUSER_likes_RECPIESArgsFromUSERSRecursive3']


class RECPIESIncludeFromUSERSRecursive3(TypedDict, total=False):
    """Relational arguments for USERS"""
    USER_likes_RECPIES: Union[bool, 'FindManyUSER_likes_RECPIESArgsFromUSERSRecursive4']


class RECPIESIncludeFromUSERSRecursive4(TypedDict, total=False):
    """Relational arguments for USERS"""

    

class RECPIESArgsFromUSERS(TypedDict, total=False):
    """Arguments for USERS"""
    include: 'RECPIESIncludeFromRECPIESRecursive1'


class RECPIESArgsFromUSERSRecursive1(TypedDict, total=False):
    """Arguments for USERS"""
    include: 'RECPIESIncludeFromRECPIESRecursive2'


class RECPIESArgsFromUSERSRecursive2(TypedDict, total=False):
    """Arguments for USERS"""
    include: 'RECPIESIncludeFromRECPIESRecursive3'


class RECPIESArgsFromUSERSRecursive3(TypedDict, total=False):
    """Arguments for USERS"""
    include: 'RECPIESIncludeFromRECPIESRecursive4'


class RECPIESArgsFromUSERSRecursive4(TypedDict, total=False):
    """Arguments for USERS"""
    
    

class FindManyRECPIESArgsFromUSERS(TypedDict, total=False):
    """Arguments for USERS"""
    take: int
    skip: int
    order_by: Union['RECPIESOrderByInput', List['RECPIESOrderByInput']]
    where: 'RECPIESWhereInput'
    cursor: 'RECPIESWhereUniqueInput'
    distinct: List['RECPIESScalarFieldKeys']
    include: 'RECPIESIncludeFromRECPIESRecursive1'


class FindManyRECPIESArgsFromUSERSRecursive1(TypedDict, total=False):
    """Arguments for USERS"""
    take: int
    skip: int
    order_by: Union['RECPIESOrderByInput', List['RECPIESOrderByInput']]
    where: 'RECPIESWhereInput'
    cursor: 'RECPIESWhereUniqueInput'
    distinct: List['RECPIESScalarFieldKeys']
    include: 'RECPIESIncludeFromRECPIESRecursive2'


class FindManyRECPIESArgsFromUSERSRecursive2(TypedDict, total=False):
    """Arguments for USERS"""
    take: int
    skip: int
    order_by: Union['RECPIESOrderByInput', List['RECPIESOrderByInput']]
    where: 'RECPIESWhereInput'
    cursor: 'RECPIESWhereUniqueInput'
    distinct: List['RECPIESScalarFieldKeys']
    include: 'RECPIESIncludeFromRECPIESRecursive3'


class FindManyRECPIESArgsFromUSERSRecursive3(TypedDict, total=False):
    """Arguments for USERS"""
    take: int
    skip: int
    order_by: Union['RECPIESOrderByInput', List['RECPIESOrderByInput']]
    where: 'RECPIESWhereInput'
    cursor: 'RECPIESWhereUniqueInput'
    distinct: List['RECPIESScalarFieldKeys']
    include: 'RECPIESIncludeFromRECPIESRecursive4'


class FindManyRECPIESArgsFromUSERSRecursive4(TypedDict, total=False):
    """Arguments for USERS"""
    take: int
    skip: int
    order_by: Union['RECPIESOrderByInput', List['RECPIESOrderByInput']]
    where: 'RECPIESWhereInput'
    cursor: 'RECPIESWhereUniqueInput'
    distinct: List['RECPIESScalarFieldKeys']
    
    

class USERSIncludeFromUSERS(TypedDict, total=False):
    """Relational arguments for USERS"""
    USER_likes_RECPIES: Union[bool, 'FindManyUSER_likes_RECPIESArgsFromUSERSRecursive1']


class USERSIncludeFromUSERSRecursive1(TypedDict, total=False):
    """Relational arguments for USERS"""
    USER_likes_RECPIES: Union[bool, 'FindManyUSER_likes_RECPIESArgsFromUSERSRecursive2']


class USERSIncludeFromUSERSRecursive2(TypedDict, total=False):
    """Relational arguments for USERS"""
    USER_likes_RECPIES: Union[bool, 'FindManyUSER_likes_RECPIESArgsFromUSERSRecursive3']


class USERSIncludeFromUSERSRecursive3(TypedDict, total=False):
    """Relational arguments for USERS"""
    USER_likes_RECPIES: Union[bool, 'FindManyUSER_likes_RECPIESArgsFromUSERSRecursive4']


class USERSIncludeFromUSERSRecursive4(TypedDict, total=False):
    """Relational arguments for USERS"""

    

class USERSArgsFromUSERS(TypedDict, total=False):
    """Arguments for USERS"""
    include: 'USERSIncludeFromUSERSRecursive1'


class USERSArgsFromUSERSRecursive1(TypedDict, total=False):
    """Arguments for USERS"""
    include: 'USERSIncludeFromUSERSRecursive2'


class USERSArgsFromUSERSRecursive2(TypedDict, total=False):
    """Arguments for USERS"""
    include: 'USERSIncludeFromUSERSRecursive3'


class USERSArgsFromUSERSRecursive3(TypedDict, total=False):
    """Arguments for USERS"""
    include: 'USERSIncludeFromUSERSRecursive4'


class USERSArgsFromUSERSRecursive4(TypedDict, total=False):
    """Arguments for USERS"""
    
    

class FindManyUSERSArgsFromUSERS(TypedDict, total=False):
    """Arguments for USERS"""
    take: int
    skip: int
    order_by: Union['USERSOrderByInput', List['USERSOrderByInput']]
    where: 'USERSWhereInput'
    cursor: 'USERSWhereUniqueInput'
    distinct: List['USERSScalarFieldKeys']
    include: 'USERSIncludeFromUSERSRecursive1'


class FindManyUSERSArgsFromUSERSRecursive1(TypedDict, total=False):
    """Arguments for USERS"""
    take: int
    skip: int
    order_by: Union['USERSOrderByInput', List['USERSOrderByInput']]
    where: 'USERSWhereInput'
    cursor: 'USERSWhereUniqueInput'
    distinct: List['USERSScalarFieldKeys']
    include: 'USERSIncludeFromUSERSRecursive2'


class FindManyUSERSArgsFromUSERSRecursive2(TypedDict, total=False):
    """Arguments for USERS"""
    take: int
    skip: int
    order_by: Union['USERSOrderByInput', List['USERSOrderByInput']]
    where: 'USERSWhereInput'
    cursor: 'USERSWhereUniqueInput'
    distinct: List['USERSScalarFieldKeys']
    include: 'USERSIncludeFromUSERSRecursive3'


class FindManyUSERSArgsFromUSERSRecursive3(TypedDict, total=False):
    """Arguments for USERS"""
    take: int
    skip: int
    order_by: Union['USERSOrderByInput', List['USERSOrderByInput']]
    where: 'USERSWhereInput'
    cursor: 'USERSWhereUniqueInput'
    distinct: List['USERSScalarFieldKeys']
    include: 'USERSIncludeFromUSERSRecursive4'


class FindManyUSERSArgsFromUSERSRecursive4(TypedDict, total=False):
    """Arguments for USERS"""
    take: int
    skip: int
    order_by: Union['USERSOrderByInput', List['USERSOrderByInput']]
    where: 'USERSWhereInput'
    cursor: 'USERSWhereUniqueInput'
    distinct: List['USERSScalarFieldKeys']
    
    

class USER_likes_RECPIESIncludeFromUSERS(TypedDict, total=False):
    """Relational arguments for USERS"""
    user: Union[bool, 'USERSArgsFromUSERSRecursive1']
    recipe: Union[bool, 'RECPIESArgsFromUSERSRecursive1']


class USER_likes_RECPIESIncludeFromUSERSRecursive1(TypedDict, total=False):
    """Relational arguments for USERS"""
    user: Union[bool, 'USERSArgsFromUSERSRecursive2']
    recipe: Union[bool, 'RECPIESArgsFromUSERSRecursive2']


class USER_likes_RECPIESIncludeFromUSERSRecursive2(TypedDict, total=False):
    """Relational arguments for USERS"""
    user: Union[bool, 'USERSArgsFromUSERSRecursive3']
    recipe: Union[bool, 'RECPIESArgsFromUSERSRecursive3']


class USER_likes_RECPIESIncludeFromUSERSRecursive3(TypedDict, total=False):
    """Relational arguments for USERS"""
    user: Union[bool, 'USERSArgsFromUSERSRecursive4']
    recipe: Union[bool, 'RECPIESArgsFromUSERSRecursive4']


class USER_likes_RECPIESIncludeFromUSERSRecursive4(TypedDict, total=False):
    """Relational arguments for USERS"""

    

class USER_likes_RECPIESArgsFromUSERS(TypedDict, total=False):
    """Arguments for USERS"""
    include: 'USER_likes_RECPIESIncludeFromUSER_likes_RECPIESRecursive1'


class USER_likes_RECPIESArgsFromUSERSRecursive1(TypedDict, total=False):
    """Arguments for USERS"""
    include: 'USER_likes_RECPIESIncludeFromUSER_likes_RECPIESRecursive2'


class USER_likes_RECPIESArgsFromUSERSRecursive2(TypedDict, total=False):
    """Arguments for USERS"""
    include: 'USER_likes_RECPIESIncludeFromUSER_likes_RECPIESRecursive3'


class USER_likes_RECPIESArgsFromUSERSRecursive3(TypedDict, total=False):
    """Arguments for USERS"""
    include: 'USER_likes_RECPIESIncludeFromUSER_likes_RECPIESRecursive4'


class USER_likes_RECPIESArgsFromUSERSRecursive4(TypedDict, total=False):
    """Arguments for USERS"""
    
    

class FindManyUSER_likes_RECPIESArgsFromUSERS(TypedDict, total=False):
    """Arguments for USERS"""
    take: int
    skip: int
    order_by: Union['USER_likes_RECPIESOrderByInput', List['USER_likes_RECPIESOrderByInput']]
    where: 'USER_likes_RECPIESWhereInput'
    cursor: 'USER_likes_RECPIESWhereUniqueInput'
    distinct: List['USER_likes_RECPIESScalarFieldKeys']
    include: 'USER_likes_RECPIESIncludeFromUSER_likes_RECPIESRecursive1'


class FindManyUSER_likes_RECPIESArgsFromUSERSRecursive1(TypedDict, total=False):
    """Arguments for USERS"""
    take: int
    skip: int
    order_by: Union['USER_likes_RECPIESOrderByInput', List['USER_likes_RECPIESOrderByInput']]
    where: 'USER_likes_RECPIESWhereInput'
    cursor: 'USER_likes_RECPIESWhereUniqueInput'
    distinct: List['USER_likes_RECPIESScalarFieldKeys']
    include: 'USER_likes_RECPIESIncludeFromUSER_likes_RECPIESRecursive2'


class FindManyUSER_likes_RECPIESArgsFromUSERSRecursive2(TypedDict, total=False):
    """Arguments for USERS"""
    take: int
    skip: int
    order_by: Union['USER_likes_RECPIESOrderByInput', List['USER_likes_RECPIESOrderByInput']]
    where: 'USER_likes_RECPIESWhereInput'
    cursor: 'USER_likes_RECPIESWhereUniqueInput'
    distinct: List['USER_likes_RECPIESScalarFieldKeys']
    include: 'USER_likes_RECPIESIncludeFromUSER_likes_RECPIESRecursive3'


class FindManyUSER_likes_RECPIESArgsFromUSERSRecursive3(TypedDict, total=False):
    """Arguments for USERS"""
    take: int
    skip: int
    order_by: Union['USER_likes_RECPIESOrderByInput', List['USER_likes_RECPIESOrderByInput']]
    where: 'USER_likes_RECPIESWhereInput'
    cursor: 'USER_likes_RECPIESWhereUniqueInput'
    distinct: List['USER_likes_RECPIESScalarFieldKeys']
    include: 'USER_likes_RECPIESIncludeFromUSER_likes_RECPIESRecursive4'


class FindManyUSER_likes_RECPIESArgsFromUSERSRecursive4(TypedDict, total=False):
    """Arguments for USERS"""
    take: int
    skip: int
    order_by: Union['USER_likes_RECPIESOrderByInput', List['USER_likes_RECPIESOrderByInput']]
    where: 'USER_likes_RECPIESWhereInput'
    cursor: 'USER_likes_RECPIESWhereUniqueInput'
    distinct: List['USER_likes_RECPIESScalarFieldKeys']
    


FindManyUSERSArgs = FindManyUSERSArgsFromUSERS
FindFirstUSERSArgs = FindManyUSERSArgsFromUSERS


    

class USERSWhereInput(TypedDict, total=False):
    """USERS arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    name: Union[None, _str, 'types.StringFilter']
    USER_likes_RECPIES: 'USER_likes_RECPIESListRelationFilter'

    # should be noted that AND and NOT should be Union['USERSWhereInputRecursive1', List['USERSWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['USERSWhereInputRecursive1']
    OR: List['USERSWhereInputRecursive1']
    NOT: List['USERSWhereInputRecursive1']


class USERSWhereInputRecursive1(TypedDict, total=False):
    """USERS arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    name: Union[None, _str, 'types.StringFilter']
    USER_likes_RECPIES: 'USER_likes_RECPIESListRelationFilter'

    # should be noted that AND and NOT should be Union['USERSWhereInputRecursive2', List['USERSWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['USERSWhereInputRecursive2']
    OR: List['USERSWhereInputRecursive2']
    NOT: List['USERSWhereInputRecursive2']


class USERSWhereInputRecursive2(TypedDict, total=False):
    """USERS arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    name: Union[None, _str, 'types.StringFilter']
    USER_likes_RECPIES: 'USER_likes_RECPIESListRelationFilter'

    # should be noted that AND and NOT should be Union['USERSWhereInputRecursive3', List['USERSWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['USERSWhereInputRecursive3']
    OR: List['USERSWhereInputRecursive3']
    NOT: List['USERSWhereInputRecursive3']


class USERSWhereInputRecursive3(TypedDict, total=False):
    """USERS arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    name: Union[None, _str, 'types.StringFilter']
    USER_likes_RECPIES: 'USER_likes_RECPIESListRelationFilter'

    # should be noted that AND and NOT should be Union['USERSWhereInputRecursive4', List['USERSWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['USERSWhereInputRecursive4']
    OR: List['USERSWhereInputRecursive4']
    NOT: List['USERSWhereInputRecursive4']


class USERSWhereInputRecursive4(TypedDict, total=False):
    """USERS arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    name: Union[None, _str, 'types.StringFilter']
    USER_likes_RECPIES: 'USER_likes_RECPIESListRelationFilter'



# aggregate USERS types


    

class USERSScalarWhereWithAggregatesInput(TypedDict, total=False):
    """USERS arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['USERSScalarWhereWithAggregatesInputRecursive1']
    OR: List['USERSScalarWhereWithAggregatesInputRecursive1']
    NOT: List['USERSScalarWhereWithAggregatesInputRecursive1']


class USERSScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """USERS arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['USERSScalarWhereWithAggregatesInputRecursive2']
    OR: List['USERSScalarWhereWithAggregatesInputRecursive2']
    NOT: List['USERSScalarWhereWithAggregatesInputRecursive2']


class USERSScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """USERS arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['USERSScalarWhereWithAggregatesInputRecursive3']
    OR: List['USERSScalarWhereWithAggregatesInputRecursive3']
    NOT: List['USERSScalarWhereWithAggregatesInputRecursive3']


class USERSScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """USERS arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['USERSScalarWhereWithAggregatesInputRecursive4']
    OR: List['USERSScalarWhereWithAggregatesInputRecursive4']
    NOT: List['USERSScalarWhereWithAggregatesInputRecursive4']


class USERSScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """USERS arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']



class USERSGroupByOutput(TypedDict, total=False):
    id: _int
    name: _str
    _sum: 'USERSSumAggregateOutput'
    _avg: 'USERSAvgAggregateOutput'
    _min: 'USERSMinAggregateOutput'
    _max: 'USERSMaxAggregateOutput'
    _count: 'USERSCountAggregateOutput'


class USERSAvgAggregateOutput(TypedDict, total=False):
    """USERS output for aggregating averages"""
    id: float


class USERSSumAggregateOutput(TypedDict, total=False):
    """USERS output for aggregating sums"""
    id: _int


class USERSScalarAggregateOutput(TypedDict, total=False):
    """USERS output including scalar fields"""
    id: _int
    name: _str


USERSMinAggregateOutput = USERSScalarAggregateOutput
USERSMaxAggregateOutput = USERSScalarAggregateOutput


class USERSMaxAggregateInput(TypedDict, total=False):
    """USERS input for aggregating by max"""
    id: bool
    name: bool


class USERSMinAggregateInput(TypedDict, total=False):
    """USERS input for aggregating by min"""
    id: bool
    name: bool


class USERSNumberAggregateInput(TypedDict, total=False):
    """USERS input for aggregating numbers"""
    id: bool


USERSAvgAggregateInput = USERSNumberAggregateInput
USERSSumAggregateInput = USERSNumberAggregateInput


USERSCountAggregateInput = TypedDict(
    'USERSCountAggregateInput',
    {
        'id': bool,
        'name': bool,
        '_all': bool,
    },
    total=False,
)

USERSCountAggregateOutput = TypedDict(
    'USERSCountAggregateOutput',
    {
        'id': int,
        'name': int,
        '_all': int,
    },
    total=False,
)


USERSKeys = Literal[
    'id',
    'name',
    'USER_likes_RECPIES',
]
USERSScalarFieldKeys = Literal[
    'id',
    'name',
]
USERSScalarFieldKeysT = TypeVar('USERSScalarFieldKeysT', bound=USERSScalarFieldKeys)

USERSRelationalFieldKeys = Literal[
        'USER_likes_RECPIES',
    ]

# USER_likes_RECPIES types

class USER_likes_RECPIESOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the USER_likes_RECPIES create method"""
    user: 'USERSCreateNestedWithoutRelationsInput'
    USER_id: _int
    recipe: 'RECPIESCreateNestedWithoutRelationsInput'
    RECIPE_id: _int


class USER_likes_RECPIESCreateInput(USER_likes_RECPIESOptionalCreateInput):
    """Required arguments to the USER_likes_RECPIES create method"""


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class USER_likes_RECPIESOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the USER_likes_RECPIES create method, without relations"""
    USER_id: _int
    RECIPE_id: _int


class USER_likes_RECPIESCreateWithoutRelationsInput(USER_likes_RECPIESOptionalCreateWithoutRelationsInput):
    """Required arguments to the USER_likes_RECPIES create method, without relations"""


class USER_likes_RECPIESCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'USER_likes_RECPIESCreateWithoutRelationsInput'
    connect: 'USER_likes_RECPIESWhereUniqueInput'


class USER_likes_RECPIESCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['USER_likes_RECPIESCreateWithoutRelationsInput', List['USER_likes_RECPIESCreateWithoutRelationsInput']]
    connect: Union['USER_likes_RECPIESWhereUniqueInput', List['USER_likes_RECPIESWhereUniqueInput']]


_USER_likes_RECPIESCompoundPrimaryKeyInner = TypedDict(
    '_USER_likes_RECPIESCompoundPrimaryKeyInner',
    {
        'USER_id': '_int',
        'RECIPE_id': '_int',
    },
    total=True
)

_USER_likes_RECPIESCompoundPrimaryKey = TypedDict(
    '_USER_likes_RECPIESCompoundPrimaryKey',
    {
        'USER_id_RECIPE_id': '_USER_likes_RECPIESCompoundPrimaryKeyInner',
    },
    total=True
)

USER_likes_RECPIESWhereUniqueInput = _USER_likes_RECPIESCompoundPrimaryKey


class USER_likes_RECPIESUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    user: 'USERSUpdateOneWithoutRelationsInput'
    recipe: 'RECPIESUpdateOneWithoutRelationsInput'


class USER_likes_RECPIESUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""


class USER_likes_RECPIESUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['USER_likes_RECPIESCreateWithoutRelationsInput']
    connect: List['USER_likes_RECPIESWhereUniqueInput']
    set: List['USER_likes_RECPIESWhereUniqueInput']
    disconnect: List['USER_likes_RECPIESWhereUniqueInput']
    delete: List['USER_likes_RECPIESWhereUniqueInput']

    # TODO
    # update: List['USER_likes_RECPIESUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['USER_likes_RECPIESUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['USER_likes_RECPIESScalarWhereInput']
    # upsert: List['USER_likes_RECPIESUpserteWithWhereUniqueWithoutRelationsInput']
    # connectOrCreate: List['USER_likes_RECPIESCreateOrConnectWithoutRelationsInput']


class USER_likes_RECPIESUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'USER_likes_RECPIESCreateWithoutRelationsInput'
    connect: 'USER_likes_RECPIESWhereUniqueInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'USER_likes_RECPIESUpdateInput'
    # upsert: 'USER_likes_RECPIESUpsertWithoutRelationsInput'
    # connectOrCreate: 'USER_likes_RECPIESCreateOrConnectWithoutRelationsInput'


class USER_likes_RECPIESUpsertInput(TypedDict):
    create: 'USER_likes_RECPIESCreateInput'
    update: 'USER_likes_RECPIESUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_USER_likes_RECPIES_USER_id_OrderByInput = TypedDict(
    '_USER_likes_RECPIES_USER_id_OrderByInput',
    {
        'USER_id': 'SortOrder',
    },
    total=True
)

_USER_likes_RECPIES_RECIPE_id_OrderByInput = TypedDict(
    '_USER_likes_RECPIES_RECIPE_id_OrderByInput',
    {
        'RECIPE_id': 'SortOrder',
    },
    total=True
)

USER_likes_RECPIESOrderByInput = Union[
    '_USER_likes_RECPIES_USER_id_OrderByInput',
    '_USER_likes_RECPIES_RECIPE_id_OrderByInput',
]



# recursive USER_likes_RECPIES types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

USER_likes_RECPIESRelationFilter = TypedDict(
    'USER_likes_RECPIESRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class USER_likes_RECPIESListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class USER_likes_RECPIESInclude(TypedDict, total=False):
    """USER_likes_RECPIES relational arguments"""
    user: Union[bool, 'USERSArgsFromUSER_likes_RECPIES']
    recipe: Union[bool, 'RECPIESArgsFromUSER_likes_RECPIES']


    

class RECPIESIncludeFromUSER_likes_RECPIES(TypedDict, total=False):
    """Relational arguments for USER_likes_RECPIES"""
    USER_likes_RECPIES: Union[bool, 'FindManyUSER_likes_RECPIESArgsFromUSER_likes_RECPIESRecursive1']


class RECPIESIncludeFromUSER_likes_RECPIESRecursive1(TypedDict, total=False):
    """Relational arguments for USER_likes_RECPIES"""
    USER_likes_RECPIES: Union[bool, 'FindManyUSER_likes_RECPIESArgsFromUSER_likes_RECPIESRecursive2']


class RECPIESIncludeFromUSER_likes_RECPIESRecursive2(TypedDict, total=False):
    """Relational arguments for USER_likes_RECPIES"""
    USER_likes_RECPIES: Union[bool, 'FindManyUSER_likes_RECPIESArgsFromUSER_likes_RECPIESRecursive3']


class RECPIESIncludeFromUSER_likes_RECPIESRecursive3(TypedDict, total=False):
    """Relational arguments for USER_likes_RECPIES"""
    USER_likes_RECPIES: Union[bool, 'FindManyUSER_likes_RECPIESArgsFromUSER_likes_RECPIESRecursive4']


class RECPIESIncludeFromUSER_likes_RECPIESRecursive4(TypedDict, total=False):
    """Relational arguments for USER_likes_RECPIES"""

    

class RECPIESArgsFromUSER_likes_RECPIES(TypedDict, total=False):
    """Arguments for USER_likes_RECPIES"""
    include: 'RECPIESIncludeFromRECPIESRecursive1'


class RECPIESArgsFromUSER_likes_RECPIESRecursive1(TypedDict, total=False):
    """Arguments for USER_likes_RECPIES"""
    include: 'RECPIESIncludeFromRECPIESRecursive2'


class RECPIESArgsFromUSER_likes_RECPIESRecursive2(TypedDict, total=False):
    """Arguments for USER_likes_RECPIES"""
    include: 'RECPIESIncludeFromRECPIESRecursive3'


class RECPIESArgsFromUSER_likes_RECPIESRecursive3(TypedDict, total=False):
    """Arguments for USER_likes_RECPIES"""
    include: 'RECPIESIncludeFromRECPIESRecursive4'


class RECPIESArgsFromUSER_likes_RECPIESRecursive4(TypedDict, total=False):
    """Arguments for USER_likes_RECPIES"""
    
    

class FindManyRECPIESArgsFromUSER_likes_RECPIES(TypedDict, total=False):
    """Arguments for USER_likes_RECPIES"""
    take: int
    skip: int
    order_by: Union['RECPIESOrderByInput', List['RECPIESOrderByInput']]
    where: 'RECPIESWhereInput'
    cursor: 'RECPIESWhereUniqueInput'
    distinct: List['RECPIESScalarFieldKeys']
    include: 'RECPIESIncludeFromRECPIESRecursive1'


class FindManyRECPIESArgsFromUSER_likes_RECPIESRecursive1(TypedDict, total=False):
    """Arguments for USER_likes_RECPIES"""
    take: int
    skip: int
    order_by: Union['RECPIESOrderByInput', List['RECPIESOrderByInput']]
    where: 'RECPIESWhereInput'
    cursor: 'RECPIESWhereUniqueInput'
    distinct: List['RECPIESScalarFieldKeys']
    include: 'RECPIESIncludeFromRECPIESRecursive2'


class FindManyRECPIESArgsFromUSER_likes_RECPIESRecursive2(TypedDict, total=False):
    """Arguments for USER_likes_RECPIES"""
    take: int
    skip: int
    order_by: Union['RECPIESOrderByInput', List['RECPIESOrderByInput']]
    where: 'RECPIESWhereInput'
    cursor: 'RECPIESWhereUniqueInput'
    distinct: List['RECPIESScalarFieldKeys']
    include: 'RECPIESIncludeFromRECPIESRecursive3'


class FindManyRECPIESArgsFromUSER_likes_RECPIESRecursive3(TypedDict, total=False):
    """Arguments for USER_likes_RECPIES"""
    take: int
    skip: int
    order_by: Union['RECPIESOrderByInput', List['RECPIESOrderByInput']]
    where: 'RECPIESWhereInput'
    cursor: 'RECPIESWhereUniqueInput'
    distinct: List['RECPIESScalarFieldKeys']
    include: 'RECPIESIncludeFromRECPIESRecursive4'


class FindManyRECPIESArgsFromUSER_likes_RECPIESRecursive4(TypedDict, total=False):
    """Arguments for USER_likes_RECPIES"""
    take: int
    skip: int
    order_by: Union['RECPIESOrderByInput', List['RECPIESOrderByInput']]
    where: 'RECPIESWhereInput'
    cursor: 'RECPIESWhereUniqueInput'
    distinct: List['RECPIESScalarFieldKeys']
    
    

class USERSIncludeFromUSER_likes_RECPIES(TypedDict, total=False):
    """Relational arguments for USER_likes_RECPIES"""
    USER_likes_RECPIES: Union[bool, 'FindManyUSER_likes_RECPIESArgsFromUSER_likes_RECPIESRecursive1']


class USERSIncludeFromUSER_likes_RECPIESRecursive1(TypedDict, total=False):
    """Relational arguments for USER_likes_RECPIES"""
    USER_likes_RECPIES: Union[bool, 'FindManyUSER_likes_RECPIESArgsFromUSER_likes_RECPIESRecursive2']


class USERSIncludeFromUSER_likes_RECPIESRecursive2(TypedDict, total=False):
    """Relational arguments for USER_likes_RECPIES"""
    USER_likes_RECPIES: Union[bool, 'FindManyUSER_likes_RECPIESArgsFromUSER_likes_RECPIESRecursive3']


class USERSIncludeFromUSER_likes_RECPIESRecursive3(TypedDict, total=False):
    """Relational arguments for USER_likes_RECPIES"""
    USER_likes_RECPIES: Union[bool, 'FindManyUSER_likes_RECPIESArgsFromUSER_likes_RECPIESRecursive4']


class USERSIncludeFromUSER_likes_RECPIESRecursive4(TypedDict, total=False):
    """Relational arguments for USER_likes_RECPIES"""

    

class USERSArgsFromUSER_likes_RECPIES(TypedDict, total=False):
    """Arguments for USER_likes_RECPIES"""
    include: 'USERSIncludeFromUSERSRecursive1'


class USERSArgsFromUSER_likes_RECPIESRecursive1(TypedDict, total=False):
    """Arguments for USER_likes_RECPIES"""
    include: 'USERSIncludeFromUSERSRecursive2'


class USERSArgsFromUSER_likes_RECPIESRecursive2(TypedDict, total=False):
    """Arguments for USER_likes_RECPIES"""
    include: 'USERSIncludeFromUSERSRecursive3'


class USERSArgsFromUSER_likes_RECPIESRecursive3(TypedDict, total=False):
    """Arguments for USER_likes_RECPIES"""
    include: 'USERSIncludeFromUSERSRecursive4'


class USERSArgsFromUSER_likes_RECPIESRecursive4(TypedDict, total=False):
    """Arguments for USER_likes_RECPIES"""
    
    

class FindManyUSERSArgsFromUSER_likes_RECPIES(TypedDict, total=False):
    """Arguments for USER_likes_RECPIES"""
    take: int
    skip: int
    order_by: Union['USERSOrderByInput', List['USERSOrderByInput']]
    where: 'USERSWhereInput'
    cursor: 'USERSWhereUniqueInput'
    distinct: List['USERSScalarFieldKeys']
    include: 'USERSIncludeFromUSERSRecursive1'


class FindManyUSERSArgsFromUSER_likes_RECPIESRecursive1(TypedDict, total=False):
    """Arguments for USER_likes_RECPIES"""
    take: int
    skip: int
    order_by: Union['USERSOrderByInput', List['USERSOrderByInput']]
    where: 'USERSWhereInput'
    cursor: 'USERSWhereUniqueInput'
    distinct: List['USERSScalarFieldKeys']
    include: 'USERSIncludeFromUSERSRecursive2'


class FindManyUSERSArgsFromUSER_likes_RECPIESRecursive2(TypedDict, total=False):
    """Arguments for USER_likes_RECPIES"""
    take: int
    skip: int
    order_by: Union['USERSOrderByInput', List['USERSOrderByInput']]
    where: 'USERSWhereInput'
    cursor: 'USERSWhereUniqueInput'
    distinct: List['USERSScalarFieldKeys']
    include: 'USERSIncludeFromUSERSRecursive3'


class FindManyUSERSArgsFromUSER_likes_RECPIESRecursive3(TypedDict, total=False):
    """Arguments for USER_likes_RECPIES"""
    take: int
    skip: int
    order_by: Union['USERSOrderByInput', List['USERSOrderByInput']]
    where: 'USERSWhereInput'
    cursor: 'USERSWhereUniqueInput'
    distinct: List['USERSScalarFieldKeys']
    include: 'USERSIncludeFromUSERSRecursive4'


class FindManyUSERSArgsFromUSER_likes_RECPIESRecursive4(TypedDict, total=False):
    """Arguments for USER_likes_RECPIES"""
    take: int
    skip: int
    order_by: Union['USERSOrderByInput', List['USERSOrderByInput']]
    where: 'USERSWhereInput'
    cursor: 'USERSWhereUniqueInput'
    distinct: List['USERSScalarFieldKeys']
    
    

class USER_likes_RECPIESIncludeFromUSER_likes_RECPIES(TypedDict, total=False):
    """Relational arguments for USER_likes_RECPIES"""
    user: Union[bool, 'USERSArgsFromUSER_likes_RECPIESRecursive1']
    recipe: Union[bool, 'RECPIESArgsFromUSER_likes_RECPIESRecursive1']


class USER_likes_RECPIESIncludeFromUSER_likes_RECPIESRecursive1(TypedDict, total=False):
    """Relational arguments for USER_likes_RECPIES"""
    user: Union[bool, 'USERSArgsFromUSER_likes_RECPIESRecursive2']
    recipe: Union[bool, 'RECPIESArgsFromUSER_likes_RECPIESRecursive2']


class USER_likes_RECPIESIncludeFromUSER_likes_RECPIESRecursive2(TypedDict, total=False):
    """Relational arguments for USER_likes_RECPIES"""
    user: Union[bool, 'USERSArgsFromUSER_likes_RECPIESRecursive3']
    recipe: Union[bool, 'RECPIESArgsFromUSER_likes_RECPIESRecursive3']


class USER_likes_RECPIESIncludeFromUSER_likes_RECPIESRecursive3(TypedDict, total=False):
    """Relational arguments for USER_likes_RECPIES"""
    user: Union[bool, 'USERSArgsFromUSER_likes_RECPIESRecursive4']
    recipe: Union[bool, 'RECPIESArgsFromUSER_likes_RECPIESRecursive4']


class USER_likes_RECPIESIncludeFromUSER_likes_RECPIESRecursive4(TypedDict, total=False):
    """Relational arguments for USER_likes_RECPIES"""

    

class USER_likes_RECPIESArgsFromUSER_likes_RECPIES(TypedDict, total=False):
    """Arguments for USER_likes_RECPIES"""
    include: 'USER_likes_RECPIESIncludeFromUSER_likes_RECPIESRecursive1'


class USER_likes_RECPIESArgsFromUSER_likes_RECPIESRecursive1(TypedDict, total=False):
    """Arguments for USER_likes_RECPIES"""
    include: 'USER_likes_RECPIESIncludeFromUSER_likes_RECPIESRecursive2'


class USER_likes_RECPIESArgsFromUSER_likes_RECPIESRecursive2(TypedDict, total=False):
    """Arguments for USER_likes_RECPIES"""
    include: 'USER_likes_RECPIESIncludeFromUSER_likes_RECPIESRecursive3'


class USER_likes_RECPIESArgsFromUSER_likes_RECPIESRecursive3(TypedDict, total=False):
    """Arguments for USER_likes_RECPIES"""
    include: 'USER_likes_RECPIESIncludeFromUSER_likes_RECPIESRecursive4'


class USER_likes_RECPIESArgsFromUSER_likes_RECPIESRecursive4(TypedDict, total=False):
    """Arguments for USER_likes_RECPIES"""
    
    

class FindManyUSER_likes_RECPIESArgsFromUSER_likes_RECPIES(TypedDict, total=False):
    """Arguments for USER_likes_RECPIES"""
    take: int
    skip: int
    order_by: Union['USER_likes_RECPIESOrderByInput', List['USER_likes_RECPIESOrderByInput']]
    where: 'USER_likes_RECPIESWhereInput'
    cursor: 'USER_likes_RECPIESWhereUniqueInput'
    distinct: List['USER_likes_RECPIESScalarFieldKeys']
    include: 'USER_likes_RECPIESIncludeFromUSER_likes_RECPIESRecursive1'


class FindManyUSER_likes_RECPIESArgsFromUSER_likes_RECPIESRecursive1(TypedDict, total=False):
    """Arguments for USER_likes_RECPIES"""
    take: int
    skip: int
    order_by: Union['USER_likes_RECPIESOrderByInput', List['USER_likes_RECPIESOrderByInput']]
    where: 'USER_likes_RECPIESWhereInput'
    cursor: 'USER_likes_RECPIESWhereUniqueInput'
    distinct: List['USER_likes_RECPIESScalarFieldKeys']
    include: 'USER_likes_RECPIESIncludeFromUSER_likes_RECPIESRecursive2'


class FindManyUSER_likes_RECPIESArgsFromUSER_likes_RECPIESRecursive2(TypedDict, total=False):
    """Arguments for USER_likes_RECPIES"""
    take: int
    skip: int
    order_by: Union['USER_likes_RECPIESOrderByInput', List['USER_likes_RECPIESOrderByInput']]
    where: 'USER_likes_RECPIESWhereInput'
    cursor: 'USER_likes_RECPIESWhereUniqueInput'
    distinct: List['USER_likes_RECPIESScalarFieldKeys']
    include: 'USER_likes_RECPIESIncludeFromUSER_likes_RECPIESRecursive3'


class FindManyUSER_likes_RECPIESArgsFromUSER_likes_RECPIESRecursive3(TypedDict, total=False):
    """Arguments for USER_likes_RECPIES"""
    take: int
    skip: int
    order_by: Union['USER_likes_RECPIESOrderByInput', List['USER_likes_RECPIESOrderByInput']]
    where: 'USER_likes_RECPIESWhereInput'
    cursor: 'USER_likes_RECPIESWhereUniqueInput'
    distinct: List['USER_likes_RECPIESScalarFieldKeys']
    include: 'USER_likes_RECPIESIncludeFromUSER_likes_RECPIESRecursive4'


class FindManyUSER_likes_RECPIESArgsFromUSER_likes_RECPIESRecursive4(TypedDict, total=False):
    """Arguments for USER_likes_RECPIES"""
    take: int
    skip: int
    order_by: Union['USER_likes_RECPIESOrderByInput', List['USER_likes_RECPIESOrderByInput']]
    where: 'USER_likes_RECPIESWhereInput'
    cursor: 'USER_likes_RECPIESWhereUniqueInput'
    distinct: List['USER_likes_RECPIESScalarFieldKeys']
    


FindManyUSER_likes_RECPIESArgs = FindManyUSER_likes_RECPIESArgsFromUSER_likes_RECPIES
FindFirstUSER_likes_RECPIESArgs = FindManyUSER_likes_RECPIESArgsFromUSER_likes_RECPIES


    

class USER_likes_RECPIESWhereInput(TypedDict, total=False):
    """USER_likes_RECPIES arguments for searching"""
    user: 'USERSRelationFilter'
    USER_id: Union[_int, 'types.IntFilter']
    recipe: 'RECPIESRelationFilter'
    RECIPE_id: Union[_int, 'types.IntFilter']

    # should be noted that AND and NOT should be Union['USER_likes_RECPIESWhereInputRecursive1', List['USER_likes_RECPIESWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['USER_likes_RECPIESWhereInputRecursive1']
    OR: List['USER_likes_RECPIESWhereInputRecursive1']
    NOT: List['USER_likes_RECPIESWhereInputRecursive1']


class USER_likes_RECPIESWhereInputRecursive1(TypedDict, total=False):
    """USER_likes_RECPIES arguments for searching"""
    user: 'USERSRelationFilter'
    USER_id: Union[_int, 'types.IntFilter']
    recipe: 'RECPIESRelationFilter'
    RECIPE_id: Union[_int, 'types.IntFilter']

    # should be noted that AND and NOT should be Union['USER_likes_RECPIESWhereInputRecursive2', List['USER_likes_RECPIESWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['USER_likes_RECPIESWhereInputRecursive2']
    OR: List['USER_likes_RECPIESWhereInputRecursive2']
    NOT: List['USER_likes_RECPIESWhereInputRecursive2']


class USER_likes_RECPIESWhereInputRecursive2(TypedDict, total=False):
    """USER_likes_RECPIES arguments for searching"""
    user: 'USERSRelationFilter'
    USER_id: Union[_int, 'types.IntFilter']
    recipe: 'RECPIESRelationFilter'
    RECIPE_id: Union[_int, 'types.IntFilter']

    # should be noted that AND and NOT should be Union['USER_likes_RECPIESWhereInputRecursive3', List['USER_likes_RECPIESWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['USER_likes_RECPIESWhereInputRecursive3']
    OR: List['USER_likes_RECPIESWhereInputRecursive3']
    NOT: List['USER_likes_RECPIESWhereInputRecursive3']


class USER_likes_RECPIESWhereInputRecursive3(TypedDict, total=False):
    """USER_likes_RECPIES arguments for searching"""
    user: 'USERSRelationFilter'
    USER_id: Union[_int, 'types.IntFilter']
    recipe: 'RECPIESRelationFilter'
    RECIPE_id: Union[_int, 'types.IntFilter']

    # should be noted that AND and NOT should be Union['USER_likes_RECPIESWhereInputRecursive4', List['USER_likes_RECPIESWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['USER_likes_RECPIESWhereInputRecursive4']
    OR: List['USER_likes_RECPIESWhereInputRecursive4']
    NOT: List['USER_likes_RECPIESWhereInputRecursive4']


class USER_likes_RECPIESWhereInputRecursive4(TypedDict, total=False):
    """USER_likes_RECPIES arguments for searching"""
    user: 'USERSRelationFilter'
    USER_id: Union[_int, 'types.IntFilter']
    recipe: 'RECPIESRelationFilter'
    RECIPE_id: Union[_int, 'types.IntFilter']



# aggregate USER_likes_RECPIES types


    

class USER_likes_RECPIESScalarWhereWithAggregatesInput(TypedDict, total=False):
    """USER_likes_RECPIES arguments for searching"""
    USER_id: Union[_int, 'types.IntWithAggregatesFilter']
    RECIPE_id: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['USER_likes_RECPIESScalarWhereWithAggregatesInputRecursive1']
    OR: List['USER_likes_RECPIESScalarWhereWithAggregatesInputRecursive1']
    NOT: List['USER_likes_RECPIESScalarWhereWithAggregatesInputRecursive1']


class USER_likes_RECPIESScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """USER_likes_RECPIES arguments for searching"""
    USER_id: Union[_int, 'types.IntWithAggregatesFilter']
    RECIPE_id: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['USER_likes_RECPIESScalarWhereWithAggregatesInputRecursive2']
    OR: List['USER_likes_RECPIESScalarWhereWithAggregatesInputRecursive2']
    NOT: List['USER_likes_RECPIESScalarWhereWithAggregatesInputRecursive2']


class USER_likes_RECPIESScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """USER_likes_RECPIES arguments for searching"""
    USER_id: Union[_int, 'types.IntWithAggregatesFilter']
    RECIPE_id: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['USER_likes_RECPIESScalarWhereWithAggregatesInputRecursive3']
    OR: List['USER_likes_RECPIESScalarWhereWithAggregatesInputRecursive3']
    NOT: List['USER_likes_RECPIESScalarWhereWithAggregatesInputRecursive3']


class USER_likes_RECPIESScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """USER_likes_RECPIES arguments for searching"""
    USER_id: Union[_int, 'types.IntWithAggregatesFilter']
    RECIPE_id: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['USER_likes_RECPIESScalarWhereWithAggregatesInputRecursive4']
    OR: List['USER_likes_RECPIESScalarWhereWithAggregatesInputRecursive4']
    NOT: List['USER_likes_RECPIESScalarWhereWithAggregatesInputRecursive4']


class USER_likes_RECPIESScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """USER_likes_RECPIES arguments for searching"""
    USER_id: Union[_int, 'types.IntWithAggregatesFilter']
    RECIPE_id: Union[_int, 'types.IntWithAggregatesFilter']



class USER_likes_RECPIESGroupByOutput(TypedDict, total=False):
    USER_id: _int
    RECIPE_id: _int
    _sum: 'USER_likes_RECPIESSumAggregateOutput'
    _avg: 'USER_likes_RECPIESAvgAggregateOutput'
    _min: 'USER_likes_RECPIESMinAggregateOutput'
    _max: 'USER_likes_RECPIESMaxAggregateOutput'
    _count: 'USER_likes_RECPIESCountAggregateOutput'


class USER_likes_RECPIESAvgAggregateOutput(TypedDict, total=False):
    """USER_likes_RECPIES output for aggregating averages"""
    USER_id: float
    RECIPE_id: float


class USER_likes_RECPIESSumAggregateOutput(TypedDict, total=False):
    """USER_likes_RECPIES output for aggregating sums"""
    USER_id: _int
    RECIPE_id: _int


class USER_likes_RECPIESScalarAggregateOutput(TypedDict, total=False):
    """USER_likes_RECPIES output including scalar fields"""
    USER_id: _int
    RECIPE_id: _int


USER_likes_RECPIESMinAggregateOutput = USER_likes_RECPIESScalarAggregateOutput
USER_likes_RECPIESMaxAggregateOutput = USER_likes_RECPIESScalarAggregateOutput


class USER_likes_RECPIESMaxAggregateInput(TypedDict, total=False):
    """USER_likes_RECPIES input for aggregating by max"""
    USER_id: bool
    RECIPE_id: bool


class USER_likes_RECPIESMinAggregateInput(TypedDict, total=False):
    """USER_likes_RECPIES input for aggregating by min"""
    USER_id: bool
    RECIPE_id: bool


class USER_likes_RECPIESNumberAggregateInput(TypedDict, total=False):
    """USER_likes_RECPIES input for aggregating numbers"""
    USER_id: bool
    RECIPE_id: bool


USER_likes_RECPIESAvgAggregateInput = USER_likes_RECPIESNumberAggregateInput
USER_likes_RECPIESSumAggregateInput = USER_likes_RECPIESNumberAggregateInput


USER_likes_RECPIESCountAggregateInput = TypedDict(
    'USER_likes_RECPIESCountAggregateInput',
    {
        'USER_id': bool,
        'RECIPE_id': bool,
        '_all': bool,
    },
    total=False,
)

USER_likes_RECPIESCountAggregateOutput = TypedDict(
    'USER_likes_RECPIESCountAggregateOutput',
    {
        'USER_id': int,
        'RECIPE_id': int,
        '_all': int,
    },
    total=False,
)


USER_likes_RECPIESKeys = Literal[
    'user',
    'USER_id',
    'recipe',
    'RECIPE_id',
]
USER_likes_RECPIESScalarFieldKeys = Literal[
    'USER_id',
    'RECIPE_id',
]
USER_likes_RECPIESScalarFieldKeysT = TypeVar('USER_likes_RECPIESScalarFieldKeysT', bound=USER_likes_RECPIESScalarFieldKeys)

USER_likes_RECPIESRelationalFieldKeys = Literal[
        'user',
        'recipe',
    ]



# we have to import ourselves as types can be namespaced to types
from . import types, enums, models, fields